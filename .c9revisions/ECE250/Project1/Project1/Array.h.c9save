{"ts":1359845433294,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//#include <iostream>\n//\n//using namespace std;\n\n#ifndef ARRAY_H\n#define ARRAY_H\n\n#include \"Exception.h\"\n\n/*****************************************\n * UW User ID:  jh9cho\n * Submitted for ECE 250\n * Semester of Submission:  (Winter) 2013\n *\n * By submitting this file, I affirm that\n * I am the author of all modifications to\n * the provided code.\n *****************************************/\n \n \n \ntemplate <typename T>\nclass Array {\n        private:\n                T *array;\n                int array_size;\n\n        public:\n                Array( int = 10 );\n                ~Array();\n\n                // accessors\n                T get( int ) const;\n                int size() const;\n\n                // mutators\n                void set( int, T );\n                void resize( int );\n};\n\ntemplate <typename T>\nArray<T>::Array( int n ) {\n\t//initialize array_size and array\n\tarray = new T [n];\n\tarray_size = n;\n\n\t//initialize all the variables inside array to 0\n\tfor (int i=0; i<array_size; i++)\n\t{\n\t\tarray[i] = 0;\n\t}\n}\n\ntemplate <typename T>\nArray<T>::~Array() {\n\t//destruct an array\n\tdelete [] array;\n}\n\ntemplate <typename T>\nT Array<T>::get( int n ) const {\n\t//throws exception when a user inputs an integer that is greater than the array_size\n\tif( n > array_size || n < 0) {\n\t\tthrow ArrayBoundsException();\n\t} else {\n\t\treturn array[n];\n\t}\t\n}\n\ntemplate <typename T>\nint Array<T>::size() const {\n\t//returns array_size\n   return array_size;\n}\n\ntemplate <typename T>\nvoid Array<T>::set( int n, T value ) {\n\t//check if user's input is greater than the array_size. if it is greater, it throws an exception.\n\tif (n > array_size || n < 0) {\n\t\tthrow ArrayBoundsException();\n\t} else {\n\t\t//sets a value to the element with index n\n\t\tarray[n] = value;\n\t}\n}\n\ntemplate <typename T>\nvoid Array<T>::resize( int n ) {\n\n\t//when array_size is equal to the user input the method executes\n\tif (n != array_size)\n\t{\n\t\t//creates a new array with size n \n\t\tT *newArray = new T [n];\n\n\t\tif (n > array_size)\n\t\t{\n\t\t\t//copies all the elements in old array to new array when user input is greater than array_size\n\t\t\tfor (int i=0; i<array_size; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = array[i];\n\t\t\t}\n\t\t\t//initialize elements after index array_size to 0\n\t\t\tfor (int i=array_size; i<n; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//copies all the elements in old array to new array up to index n\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = array[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//destruct the old array\n\t\tdelete [] array;\n\t\t//points old array variable's memory location to the new array memory location\n\t\tarray = newArray;\n\t\t//change the array_size value\n\t\tarray_size = n;\n\t}\n}\n\n#endif\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2650}]],"length":2650}
