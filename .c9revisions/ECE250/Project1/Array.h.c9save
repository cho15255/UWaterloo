{"ts":1359640279031,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//#include <iostream>\n//\n//using namespace std;\n\n#ifndef ARRAY_H\n#define ARRAY_H\n\n#include \"Exception.h\"\n\n/*****************************************\n * UW User ID:  jh9cho\n * Submitted for ECE 250\n * Semester of Submission:  (Winter) 2013\n *\n * By submitting this file, I affirm that\n * I am the author of all modifications to\n * the provided code.\n *****************************************/\n \n \n \ntemplate <typename T>\nclass Array {\n        private:\n                T *array;\n                int array_size;\n\n        public:\n                Array( T = 10 );\n                ~Array();\n\n                // accessors\n                int get( int ) const;\n                int size() const;\n\t\t\t\tvoid print() const;\n\n                // mutators\n                void set( int, int );\n                void resize( int );\n};\n\ntemplate <typename T>\nArray::Array( T n ) {\n\t//initialize array_size and array\n\tarray_size = n;\n\n\tarray = new T [n];\n\t//initialize all the variables inside array to 0\n\tfor (int i=0; i<array_size; i++)\n\t{\n\t\tarray[i] = 0;\n\t}\n}\n\nArray::~Array() {\n\t//destruct an array\n\tdelete [] array;\n}\n\n\nint Array::get( int n ) const {\n\t//throws exception when a user inputs an integer that is greater than the array_size\n\tif( n > array_size || n < 0)\n\t{\n\t\tthrow ArrayBoundsException();\n\t}\n\n\treturn array[n];   \n}\n//a method to output all the elements in this array\n//void Array::print() const{\n//\t\n//\tcout << \"Printing array\" << endl;\n//\n//\tfor (int i=0; i<array_size; i++)\n//\t{\n//\t\tcout << array[i] << endl;\n//\t}\n//\n//\tcout << \"Printing finish!\" << endl;\n//}\n\nint Array::size() const {\n\t//returns array_size\n   return array_size;\n}\n\nvoid Array::set( int n, int value ) {\n\t//check if user's input is greater than the array_size. if it is greater, it throws an exception.\n\tif (n > array_size || n < 0)\n\t{\n\t\tthrow ArrayBoundsException();\n\t}\n\t//sets a value to the element with index n\n\tarray[n] = value;\n}\n\nvoid Array::resize( int n ) {\n\t//throws an exception if the user inputs a negative number\n\tif ( n < 0 )\n\t{\n\t\tthrow ArrayBoundsException();\n\t}\n\t//when array_size is equal to the user input the method executes\n\tif (n != array_size)\n\t{\n\t\t//creates a new array with size n \n\t\tint *newArray = new int [n];\n\n\t\tif (n > array_size)\n\t\t{\n\t\t\t//copies all the elements in old array to new array when user input is greater than array_size\n\t\t\tfor (int i=0; i<array_size; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = array[i];\n\t\t\t}\n\t\t\t//initialize elements after index array_size to 0\n\t\t\tfor (int i=array_size; i<n; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = 0;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//copies all the elements in old array to new array up to index n\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t{\n\t\t\t\tnewArray[i] = array[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\t//destruct the old array\n\t\tdelete [] array;\n\t\t//points old array variable's memory location to the new array memory location\n\t\tarray = newArray;\n\t\t//change the array_size value\n\t\tarray_size = n;\n\t}\n}\n\n#endif\n\n"]],"start1":0,"start2":0,"length1":0,"length2":2895}]],"length":2895}
{"contributors":[],"silentsave":false,"ts":1359640309143,"patch":[[{"diffs":[[0," Array( "],[-1,"T"],[1,"int"],[0," = 10 );"]],"start1":542,"start2":542,"length1":17,"length2":19},{"diffs":[[0,"ray;\n}\n\n"],[-1,"\nint"],[1,"template <typename T>\nㅆ"],[0," Array::"]],"start1":1099,"start2":1099,"length1":20,"length2":39},{"diffs":[[0,"l;\n//}\n\n"],[1,"template <typename T>\n"],[0,"int Arra"]],"start1":1577,"start2":1577,"length1":16,"length2":38},{"diffs":[[0,"ay_size;\n}\n\n"],[1,"template <typename T>\n"],[0,"void Array::"]],"start1":1668,"start2":1668,"length1":24,"length2":46},{"diffs":[[0,"lue;\n}\n\n"],[1,"template <typename T>\n"],[0,"void Arr"]],"start1":1965,"start2":1965,"length1":16,"length2":38}]],"length":2982,"saved":false}
{"ts":1359640311250,"patch":[[{"diffs":[[0," T>\n"],[-1,"ㅆ"],[1,"T"],[0," Arr"]],"start1":1125,"start2":1125,"length1":9,"length2":9}]],"length":2982,"saved":false}
{"ts":1359640422676,"patch":[[{"diffs":[[0," int n, "],[-1,"int"],[1,"T"],[0," value )"]],"start1":1718,"start2":1718,"length1":19,"length2":17},{"diffs":[[0,"ze n \n\t\t"],[-1,"int"],[1,"T"],[0," *newArr"]],"start1":2257,"start2":2257,"length1":19,"length2":17},{"diffs":[[0,"y = new "],[-1,"int"],[1,"T"],[0," [n];\n\n\t"]],"start1":2275,"start2":2275,"length1":19,"length2":17}]],"length":2976,"saved":false}
{"ts":1359642449583,"patch":[[{"diffs":[[0,":Array( "],[-1,"T"],[1,"int"],[0," n ) {\n\t"]],"start1":849,"start2":849,"length1":17,"length2":19}]],"length":2978,"saved":false}
