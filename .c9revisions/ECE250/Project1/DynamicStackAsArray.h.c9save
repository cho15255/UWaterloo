{"ts":1359561216718,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1359561237827,"patch":[[{"diffs":[[1,"#ifndef DYNAMIC_STACK_AS_ARRAY_H\r\n#define DYNAMIC_STACK_AS_ARRAY_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Semester of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n \r\n #include <iostream>\r\nusing namespace std;\r\n\r\n#include \"Exception.h\"\r\n#include \"Array.h\"\r\n\r\ntemplate <typename T>\r\nclass DynamicStackAsArray {\r\n    private:\r\n\t\t\r\n\t\tArray<T> *stack ; \r\n\t\tint ihead, count, initial_size, array_size;\r\n\r\n\tpublic:\r\n\t\tDynamicStackAsArray( int = 10 );\r\n\t\t~DynamicStackAsArray();\r\n\r\n\t\tT top() const;\r\n\t\tint size() const;\r\n\t\tbool empty() const;\r\n\t\tint capacity() const;\r\n\r\n\t\tvoid push( T const & );\r\n\t\tT pop();\r\n\t\tvoid clear();\r\n\t\tvoid print();\r\n\t\r\n        void stackResize(int ) ;\r\n};\r\n\r\ntemplate <typename T>\r\nDynamicStackAsArray<T>::DynamicStackAsArray( int n ):\r\ncount( 0 ),\r\ninitial_size( n ),\r\narray_size( n ) {            \r\n      \r\n\t   stack = new Array<T>(array_size);\r\n\t   // What initial value will you give to ihead ?\r\n}\r\n\r\ntemplate <typename T>\r\nDynamicStackAsArray<T>::~DynamicStackAsArray() {\r\n\t// Enter your implementation\r\n}\r\n\r\ntemplate <typename  T>\r\nT DynamicStackAsArray<T>::top() const {\r\n    \r\n   // Enter your implementation\r\n      \r\n}\r\n\r\ntemplate <typename T>\r\nint DynamicStackAsArray<T>::size() const {\r\n\t// Enter your implementation\r\n}\r\n\r\ntemplate <typename T>\r\nbool DynamicStackAsArray<T>::empty() const {\r\n\t// Enter your implementation\r\n}\r\n\r\ntemplate <typename T>\r\nint DynamicStackAsArray<T>::capacity() const {\r\n\t// Enter your implementation\r\n}\r\n\r\ntemplate <typename T>\r\nvoid DynamicStackAsArray<T>::push( T const &obj ) {\r\n     // Enter your implementation\r\n                \r\n}\r\n\r\ntemplate <typename T>\r\nT DynamicStackAsArray<T>::pop() {\r\n\t // Enter your implementation\r\n}\r\n\r\ntemplate <typename T>\r\nvoid DynamicStackAsArray<T>::clear() {\r\n     // Enter your implementation\r\n     \r\n     \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2045}]],"length":2045,"saved":false}
