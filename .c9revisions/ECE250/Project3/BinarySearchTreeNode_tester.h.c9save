{"ts":1363915993253,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*************************************************\n * BinarySearchTreeNode_tester<Type>\n * A class for testing nodes used in singly-linked lists.\n *\n * Author:  Douglas Wilhelm Harder\n * Copyright (c) 2006-9 by Douglas Wilhelm Harder.  All rights reserved.\n *\n * DO NOT EDIT THIS FILE\n *************************************************/\n\n#ifndef BinarySearchTreeNode_TESTER_H    // include guards\n#define BinarySearchTreeNode_TESTER_H\n\n#include \"Exception.h\"\n#include \"Tester.h\"\n#include \"BinarySearchTreeNode.h\"\n\n#include <iostream>\n\ntemplate <typename Type>\nclass BinarySearchTreeNode_tester:public Tester< BinarySearchTreeNode<Type> > {\n\tpublic:\n\t\tBinarySearchTreeNode_tester( BinarySearchTreeNode<Type> *obj = 0 ):Tester< BinarySearchTreeNode<Type> >( obj ) {\n\t\t\t// empty\n\t\t}\n\n\t\tvoid process();\n};\n\n/****************************************************\n * void process()\n *\n * Process the current command.  For BinarySearchTree nodes.\n * Commands include:\n *\n *  Accessors\n *\n *   x n           retrieve()           the x value stored is n\n \n *\n *   right         get_right()            the north-west pointer can be followed\n *   left          get_left()             the north-west pointer is 0\n *   \n *   right0        get_right()            the right pointer is 0\n *   left0         get_left()             the left pointer is 0\n *  \n *\n *  Others\n *   summary                         prints the amount of memory allocated\n *                                   minus the memory deallocated\n *   details                         prints a detailed description of which\n *                                   memory was allocated with details\n *\n ****************************************************/\ntemplate <typename Type>\nvoid BinarySearchTreeNode_tester<Type>::process() {\n\tif ( BinarySearchTreeNode_tester<Type>::command == \"right\" ) {\n\t\tBinarySearchTreeNode<Type> *actual_right = BinarySearchTreeNode_tester<Type>::object->get_right();\n\n\t\tif ( actual_right != 0 ) {\n\t\t\tBinarySearchTreeNode_tester<Type>::object = actual_right;\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \": Failure in right(): expecting to follow a non-null right pointer\" << std::endl;\n\t\t}\n\t} else if ( BinarySearchTreeNode_tester<Type>::command == \"right0\" ) {\n\t\tif ( BinarySearchTreeNode_tester<Type>::object->get_right() == 0 ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \": Failure in right(): expecting a null (0) right pointer\" << std::endl;\n\t\t}\n\t} else if ( BinarySearchTreeNode_tester<Type>::command == \"left\" ) {\n\t\tBinarySearchTreeNode<Type> *actual_left = BinarySearchTreeNode_tester<Type>::object->get_left();\n\n\t\tif ( actual_left != 0 ) {\n\t\t\tBinarySearchTreeNode_tester<Type>::object = actual_left;\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \": Failure in left(): expecting to follow a non-null left pointer\" << std::endl;\n\t\t}\n\t} else if ( BinarySearchTreeNode_tester<Type>::command == \"left0\" ) {\n\t\tif ( BinarySearchTreeNode_tester<Type>::object->get_left() == 0 ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \": Failure in left(): expecting a null (0) left pointer\" << std::endl;\n\t\t}\n\t\n\n\t\t\n\t\n\t} else if ( BinarySearchTreeNode_tester<Type>::command == \"x\" ) {\n\t\tType expected_value;\n\t\tstd::cin >> expected_value;\n\n\t\tType actual_value;\n\t\tactual_value = BinarySearchTreeNode_tester<Type>::object->retrieve();\n\n\t\tif ( expected_value == actual_value ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \": Failure in retrieve(): expecting '\" << expected_value <<\n\t\t\t\t\"' but got '\" << actual_value << \"'\" << std::endl;\n\t\t}\n\t\n\t} else {\n\t\tstd::cout << BinarySearchTreeNode_tester<Type>::command << \": Command not found.\" << std::endl;\n\t}\n}\n#endif\n"]],"start1":0,"start2":0,"length1":0,"length2":3725}]],"length":3725}
