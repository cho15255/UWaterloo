{"ts":1363701027418,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1363701030251,"patch":[[{"diffs":[[1,"#ifndef BSTTREE_H\r\n#define BSTTREE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Department of Electrical and Computer Engineering\r\n * University of Waterloo\r\n * Calender Term of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"ece250.h\"\r\n#include \"BinarySearchTreeNode.h\"\r\n#include \"Exception.h\"\r\n#include <iostream>\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTree {\r\n    private:\r\n\t\tBinarySearchTreeNode<Type> *tree_root;\r\n\t\tint count;\r\n\r\n\tpublic:\r\n\t\tBinarySearchTree();\r\n\t\t~BinarySearchTree();\r\n\r\n\t\t// Accessors\r\n\r\n\t\tint size() const;\r\n\t\tbool empty() const;\r\n\r\n\t\tType min() const;\t\r\n\t\tType max() const;\t\r\n\t\tType sum() const;\r\n\t\r\n\t\r\n\t    \r\n\r\n\r\n\t\tBinarySearchTreeNode<Type> *root() const;\r\n\t\tbool member( const Type  &) const;\r\n\r\n\t\t// Mutators\r\n       \r\n\t\tvoid insert( const Type &);\r\n\t\tvoid clear();\r\n\r\n};\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTree<Type>::BinarySearchTree():\r\ntree_root( 0 ), \r\ncount( 0 ) {\r\n\t// empty constructor\r\n}\r\n\r\ntemplate <typename Type>\r\nBinarySearchTree<Type>::~BinarySearchTree() {\r\n}\r\n\r\ntemplate <typename Type>\r\nint BinarySearchTree<Type>::size() const {\r\n\treturn 0;\r\n}\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTree<Type>::empty() const {\r\n\treturn true;\r\n}\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::min() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::max() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::sum() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTree<Type>::root() const \r\n{\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTree<Type>::member( const Type  &x ) const {\r\n\treturn false;\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTree<Type>::insert( const Type  &x ) {\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTree<Type>::clear() {\r\n}\r\n\r\n// You can modify this function however you want:  it will not be tested\r\n\r\ntemplate <typename Type>\r\nstd::ostream &operator << ( std::ostream &out, BinarySearchTree<Type> const &qt ) {\r\n\treturn out;\r\n}\r\n\r\n// Is an error showing up in ece250.h or elsewhere?\r\n// Did you forget a closing '}' ?\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2409}]],"length":2409,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363869728239,"patch":[[{"diffs":[[0,"chTree() {\r\n"],[1,"    \r\n"],[0,"}\r\n\r\ntemplat"]],"start1":1229,"start2":1229,"length1":24,"length2":30},{"diffs":[[0,"size() const {\r\n"],[1,"    \r\n"],[0,"\treturn 0;\r\n}\r\n\r"]],"start1":1306,"start2":1306,"length1":32,"length2":38}]],"length":2421,"saved":false}
{"ts":1363869751148,"patch":[[{"diffs":[[0," {\r\n"],[-1,"    \r\n"],[0,"\treturn "],[-1,"0"],[1,"count"],[0,";\r\n}"]],"start1":1318,"start2":1318,"length1":23,"length2":21}]],"length":2419,"saved":false}
{"ts":1363869772880,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\treturn tru"],[1,"    if (count == 0) {\r\n        return true;\r\n    }\r\n    \r\n\treturn fals"],[0,"e;\r\n"]],"start1":1411,"start2":1411,"length1":19,"length2":78}]],"length":2478,"saved":false}
{"ts":1363869898115,"patch":[[{"diffs":[[0,":min() const {\r\n"],[1,"    if (tree_root -> get_left == 0) {\r\n        \r\n    }\r\n"],[0,"\treturn Type();\r"]],"start1":1548,"start2":1548,"length1":32,"length2":88}]],"length":2534,"saved":false}
{"ts":1363870082050,"patch":[[{"diffs":[[0,"        "],[1,"return tree_root->retrieve"],[0,"\r\n    }\r"]],"start1":1603,"start2":1603,"length1":16,"length2":42}]],"length":2560,"saved":false}
{"ts":1363870093848,"patch":[[{"diffs":[[0,"retrieve"],[1,"();"],[0,"\r\n    }\r"]],"start1":1629,"start2":1629,"length1":16,"length2":19}]],"length":2563,"saved":false}
{"ts":1363870148548,"patch":[[{"diffs":[[0,"eve();\r\n"],[1,"    } else {\r\n        return tree_root->get_left->min();\r\n"],[0,"    }\r\n\t"]],"start1":1634,"start2":1634,"length1":16,"length2":74}]],"length":2621,"saved":false}
{"ts":1363870202660,"patch":[[{"diffs":[[0,"\n    }\r\n"],[-1,"\treturn Type();\r\n"],[0,"}\r\n\r\n\r\n\r"]],"start1":1699,"start2":1699,"length1":33,"length2":16}]],"length":2604,"saved":false}
{"ts":1363870237953,"patch":[[{"diffs":[[0,"() const {\r\n"],[-1,"\treturn Type();"],[1,"    if (tree_root->get_left==0) {\r\n        return tree_root->retrieve();\r\n    } else {\r\n        return tree_root->get_left->min();\r\n    }"],[0,"\r\n}\r\n\r\n\r\n\r\nt"]],"start1":1774,"start2":1774,"length1":39,"length2":161}]],"length":2726,"saved":false}
{"ts":1363870241011,"patch":[[{"diffs":[[0,"oot->get_left->m"],[-1,"in"],[1,"ax"],[0,"();\r\n    }\r\n}\r\n\r"]],"start1":1895,"start2":1895,"length1":34,"length2":34}]],"length":2726,"saved":false}
{"ts":1363870336232,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\treturn Type();"],[1,"    if (this == 0) {\r\n        return 0;\r\n    } else {\r\n        return (this->retrieve() + this->get_left()->sum() + this->get_right()->sum());\r\n    }"],[0,"\r\n}\r"]],"start1":2000,"start2":2000,"length1":23,"length2":157}]],"length":2860,"saved":false}
{"ts":1363870358523,"patch":[[{"diffs":[[0,"()->sum() + "],[1,"\r\n                "],[0,"this->get_ri"]],"start1":2108,"start2":2108,"length1":24,"length2":42}]],"length":2878,"saved":false}
{"ts":1363870402240,"patch":[[{"diffs":[[0,"}\r\n}\r\n\r\n"],[-1,"\r\n\r\n\r\n\r\n\r\n"],[0,"template"]],"start1":2170,"start2":2170,"length1":26,"length2":16}]],"length":2868,"saved":false}
{"ts":1363870475015,"patch":[[{"diffs":[[0,"\treturn "],[-1,"0"],[1,"tree_root"],[0,";\r\n}\r\n\r\n"]],"start1":2274,"start2":2274,"length1":17,"length2":25}]],"length":2876,"saved":false}
{"ts":1363870484782,"patch":[[{"diffs":[[0,";\r\n}\r\n\r\n"],[-1,"\r\n\r\n\r\n"],[0,"template"]],"start1":2291,"start2":2291,"length1":22,"length2":16}]],"length":2870,"saved":false}
{"ts":1363870527630,"patch":[[{"diffs":[[0,"   if (t"],[-1,"his"],[1,"ree_root"],[0," == 0) {"]],"start1":2005,"start2":2005,"length1":19,"length2":24},{"diffs":[[0,"eturn (t"],[-1,"his"],[1,"ree_root"],[0,"->retrie"]],"start1":2073,"start2":2073,"length1":19,"length2":24},{"diffs":[[0,"ve() + t"],[-1,"his"],[1,"ree_root"],[0,"->get_le"]],"start1":2097,"start2":2097,"length1":19,"length2":24},{"diffs":[[0,"       t"],[-1,"his"],[1,"ree_root"],[0,"->get_ri"]],"start1":2146,"start2":2146,"length1":19,"length2":24},{"diffs":[[0,"onst {\r\n"],[-1,"\treturn false;"],[1,"    if (tree_root->retrieve() == x) {\r\n        return \r\n    }"],[0,"\r\n}\r\n\r\nt"]],"start1":2400,"start2":2400,"length1":30,"length2":77}]],"length":2937,"saved":false}
{"ts":1363870532859,"patch":[[{"diffs":[[0," return "],[1,"true;"],[0,"\r\n    }\r"]],"start1":2454,"start2":2454,"length1":16,"length2":21}]],"length":2942,"saved":false}
{"ts":1363870538346,"patch":[[{"diffs":[[0,"turn true;\r\n"],[1,"    } else {\r\n        \r\n"],[0,"    }\r\n}\r\n\r\n"]],"start1":2457,"start2":2457,"length1":24,"length2":48}]],"length":2966,"saved":false}
{"ts":1363870544848,"patch":[[{"diffs":[[0,"        "],[1,"return "],[0,"\r\n    }\r"]],"start1":2483,"start2":2483,"length1":16,"length2":23}]],"length":2973,"saved":false}
{"ts":1363870799364,"patch":[[{"diffs":[[0,"   }"],[-1," else {\r\n        return "],[1,"\r\n    \r\n    if (x < tree_root->retrieve()) {\r\n        return tree_root->get_left()->member(x);\r\n    } else {\r\n        return tree_root->get_right()->member(x);"],[0,"\r\n  "]],"start1":2470,"start2":2470,"length1":32,"length2":167}]],"length":3108,"saved":false}
{"ts":1363870844688,"patch":[[{"diffs":[[0,"pe  &x ) {\r\n"],[1,"    \r\n"],[0,"}\r\n\r\ntemplat"]],"start1":2718,"start2":2718,"length1":24,"length2":30}]],"length":3114,"saved":false}
{"ts":1363870881912,"patch":[[{"diffs":[[0,"ue;\r\n    }\r\n"],[1,"    if (tree_root->retrieve() == 0) {\r\n        return false;\r\n    }\r\n"],[0,"    \r\n    if"]],"start1":2464,"start2":2464,"length1":24,"length2":93}]],"length":3183,"saved":false}
{"ts":1363870889412,"patch":[[{"diffs":[[0,"ve() == "],[-1,"x"],[1,"0"],[0,") {\r\n   "]],"start1":2433,"start2":2433,"length1":17,"length2":17},{"diffs":[[0,"\n        return "],[-1,"tru"],[1,"fals"],[0,"e;\r\n    }\r\n    i"]],"start1":2446,"start2":2446,"length1":35,"length2":36},{"diffs":[[0,"->retrieve() == "],[-1,"0"],[1,"x"],[0,") {\r\n        ret"]],"start1":2494,"start2":2494,"length1":33,"length2":33},{"diffs":[[0,"\n        return "],[-1,"fals"],[1,"tru"],[0,"e;\r\n    }\r\n    \r"]],"start1":2515,"start2":2515,"length1":36,"length2":35}]],"length":3183,"saved":false}
{"ts":1363871199393,"patch":[[{"diffs":[[0,"pe  &x ) {\r\n    "],[1,"if (tree_root == 0) {\r\n        \r\n    }"],[0,"\r\n}\r\n\r\ntemplate "]],"start1":2787,"start2":2787,"length1":32,"length2":70}]],"length":3221,"saved":false}
{"ts":1363871492115,"patch":[[{"diffs":[[0,"e_root == 0) {\r\n"],[1,"        tree_root = new BinarySearchTreeNode (x);\r\n    } else {\r\n"],[0,"        \r\n    }\r"]],"start1":2810,"start2":2810,"length1":32,"length2":97}]],"length":3286,"saved":false}
