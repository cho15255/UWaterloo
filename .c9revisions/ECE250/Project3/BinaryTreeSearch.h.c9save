{"ts":1363701027418,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1363701030251,"patch":[[{"diffs":[[1,"#ifndef BSTTREE_H\r\n#define BSTTREE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Department of Electrical and Computer Engineering\r\n * University of Waterloo\r\n * Calender Term of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"ece250.h\"\r\n#include \"BinarySearchTreeNode.h\"\r\n#include \"Exception.h\"\r\n#include <iostream>\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTree {\r\n    private:\r\n\t\tBinarySearchTreeNode<Type> *tree_root;\r\n\t\tint count;\r\n\r\n\tpublic:\r\n\t\tBinarySearchTree();\r\n\t\t~BinarySearchTree();\r\n\r\n\t\t// Accessors\r\n\r\n\t\tint size() const;\r\n\t\tbool empty() const;\r\n\r\n\t\tType min() const;\t\r\n\t\tType max() const;\t\r\n\t\tType sum() const;\r\n\t\r\n\t\r\n\t    \r\n\r\n\r\n\t\tBinarySearchTreeNode<Type> *root() const;\r\n\t\tbool member( const Type  &) const;\r\n\r\n\t\t// Mutators\r\n       \r\n\t\tvoid insert( const Type &);\r\n\t\tvoid clear();\r\n\r\n};\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTree<Type>::BinarySearchTree():\r\ntree_root( 0 ), \r\ncount( 0 ) {\r\n\t// empty constructor\r\n}\r\n\r\ntemplate <typename Type>\r\nBinarySearchTree<Type>::~BinarySearchTree() {\r\n}\r\n\r\ntemplate <typename Type>\r\nint BinarySearchTree<Type>::size() const {\r\n\treturn 0;\r\n}\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTree<Type>::empty() const {\r\n\treturn true;\r\n}\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::min() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::max() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTree<Type>::sum() const {\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTree<Type>::root() const \r\n{\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTree<Type>::member( const Type  &x ) const {\r\n\treturn false;\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTree<Type>::insert( const Type  &x ) {\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTree<Type>::clear() {\r\n}\r\n\r\n// You can modify this function however you want:  it will not be tested\r\n\r\ntemplate <typename Type>\r\nstd::ostream &operator << ( std::ostream &out, BinarySearchTree<Type> const &qt ) {\r\n\treturn out;\r\n}\r\n\r\n// Is an error showing up in ece250.h or elsewhere?\r\n// Did you forget a closing '}' ?\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2409}]],"length":2409,"saved":false}
