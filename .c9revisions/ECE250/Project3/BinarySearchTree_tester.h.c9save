{"ts":1363915974601,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*************************************************\n * BinarySearchTree_tester<Type>\n * A class for testing a BinarySearchTree.\n *\n * Author:  Douglas Wilhelm Harder\n * Copyright (c) 2006-9 by Douglas Wilhelm Harder.  All rights reserved.\n *\n * DO NOT EDIT THIS FILE\n *************************************************/\n\n#ifndef BINARYSEARCHTREE_TESTER_H    // include guards\n#define BINARYSEARCHTREE_TESTER_H\n\n#include \"Exception.h\"\n#include \"Tester.h\"\n#include \"BinarySearchTree.h\"\n#include \"BinarySearchTreeNode.h\"\n#include \"BinarySearchTreeNode_tester.h\"\n\n\n#include <iostream>\n\ntemplate <typename Type>\nclass BinarySearchTree_tester:public Tester< BinarySearchTree<Type> > {\n\tusing Tester< BinarySearchTree<Type> >::object;\n\tusing Tester< BinarySearchTree<Type> >::command;\n\n\tpublic:\n\t\tBinarySearchTree_tester( BinarySearchTree<Type> *obj = 0 ):Tester< BinarySearchTree<Type> >( obj ) {\n\t\t\t// empty\n\t\t}\n\n\t\tvoid process();\n};\n\n/****************************************************\n * void process()\n *\n * Process the current command.  For BinarySearhTree. \n * Commands are:\n *\n *  Accessors\n *\n *   size n          size            the size equals n\n *   empty b         empty           the result is the boolean value b\n *\n *   min x         min_x           x is the smallest value in the tree\n *   max x         max_x           x is the largest value in the tree\n *\n *   sum x         sum_x           x is the sum of the x values in the tree\n *   root            root            the root is not 0 and starts a BinarySearhTree_node_tester on that\n *                                   node until the 'exit' command is typed\n *   root0           root            the root is 0\n *   member x  b    member          x is a member of the tree\n *\n *  Mutators\n *\n *   insert x       insert          insert the value x into the tree ignoring duplicates\n *   clear           clear           deletes all the children from the tree\n *\n *  Others\n *   cout            cout << list    print the list (for testing only)\n *   summary                         prints the amount of memory allocated\n *                                   minus the memory deallocated\n *   details                         prints a detailed description of which\n *                                   memory was allocated with details\n *\n ****************************************************/\ntemplate <typename Type>\nvoid BinarySearchTree_tester<Type>::process() {\n\tif ( command == \"size\" ) {\n\t\t// check if the size equals the next integer read\n\n\t\tint expected_size;\n\n\t\tstd::cin >> expected_size;\n\n\t\tint actual_size = object->size();\n\n\t\tif ( actual_size == expected_size ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in size(): expecting the value '\" << expected_size << \"' but got '\" << actual_size << \"'\" << std::endl;\n\t\t}\n\t} else if ( command == \"empty\" ) {\n\t\t// check if the empty status equals the next boolean read\n\n\t\tbool expected_empty;\n\n\t\tstd::cin >> expected_empty;\n\n\t\tbool actual_empty = object->empty();\n\n\t\tif ( actual_empty == expected_empty ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in empty(): expecting the value '\" << expected_empty << \"' but got '\" << actual_empty << \"'\" << std::endl;\n\t\t}\n\t} else if ( command == \"min\" ) {\n\t\t// checks if the smallest x value is that returned by this function\n\n\t\tType expected_min;\n\n\t\tstd::cin >> expected_min;\n\n\t\tType actual_min = object->min();\n\n\t\tif ( actual_min == expected_min ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in min(): expecting the value '\" << expected_min << \"' but got '\" << actual_min << \"'\" << std::endl;\n\t\t}\n\t\n\t} else if ( command == \"max\" ) {\n\t\t// checks if the largest x value is that returned by this function\n\n\t\tType expected_max;\n\n\t\tstd::cin >> expected_max;\n\n\t\tType actual_max = object->max();\n\n\t\tif ( actual_max == expected_max ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in max(): expecting the value '\" << expected_max<< \"' but got '\" << actual_max << \"'\" << std::endl;\n\t\t}\n\t\n\t} else if ( command == \"sum\" ) {\n\t\t// checks if the sum of the x values is that returned by this function\n\n\t\tType expected_sum;\n\n\t\tstd::cin >> expected_sum;\n\n\t\tType actual_sum = object->sum();\n\n\t\tif ( actual_sum == expected_sum ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in sum(): expecting the value '\" << expected_sum << \"' but got '\" << actual_sum << \"'\" << std::endl;\n\t\t}\n\t\n\t} else if ( command == \"root\" ) {\n\t\t// checks that the root is not 0, and if it is not,\n\t\t// the next object gives the number of commands which should\n\t\t// be tested by the BinarySearchTreeNode_tester\n\n\t\tBinarySearchTreeNode<Type> *actual_root = object->root();\n\n\t\tif ( actual_root == 0 ) {\n\t\t\tstd::cout << \"Failure in root(): expecting a non-zero root pointer\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\n\t\t\tBinarySearchTreeNode_tester<Type> tester( actual_root );\n\n\t\t\ttester.run();\n\t\t}\n\t\t\n\t\t\n\t} else if ( command == \"root0\" ) {\n\t\t// check that the root pointer is 0\n\n\t\tif ( object->root() == 0 ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"Failure in root(): expecting a 0 root pointer\" << std::endl;\n\t\t}\n\t} else if ( command == \"member\" ) {\n\t\t// check if the next object read in is in the linked list\n\n\t\tType element_x;\t\t\n\t\tbool membership;\n\n\t\tstd::cin >> element_x;\n\t\t\n\t\tstd::cin >> membership;\n\n\t\tif ( object->member( element_x ) == membership ) {\n\t\t\tstd::cout << \"Okay\" << std::endl;\n\t\t} else {\n\t\t\tif ( membership ) {\n\t\t\t\tstd::cout << \"Failure in member(): expecting the value (\" << element_x << \") to be in the BinarySearchTree\" << std::endl;\n\t\t\t} else {\n\t\t\t\tstd::cout << \"Failure in member(): not expecting the value (\" << element_x << \") to be in the BinarySearchTree\" << std::endl;\n\t\t\t}\n\t\t}\n\t} else if ( command == \"insert\" ) {\n\t\t// insert the next pair into the BinarySearchTree\n\n\t\tType x;\n\n\t\tstd::cin >> x;\n\t\t\n\n\t\tobject->insert( x );\n\t\tstd::cout << \"Okay\" << std::endl;\n\t} else if ( command == \"clear\" ) {\n\t\t// delete all the nodes in the tree\n\n\t\tobject->clear();\n\t\tstd::cout << \"Okay\" << std::endl;\n\t} else if ( command == \"cout\" ) {\n\t\tstd::cout << *object << std::endl;\n\t} else {\n\t\tstd::cout << command << \": Command not found.\" << std::endl;\n\t}\n}\n\n#endif\n"]],"start1":0,"start2":0,"length1":0,"length2":6278}]],"length":6278}
