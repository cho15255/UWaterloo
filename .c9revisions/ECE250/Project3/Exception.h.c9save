{"ts":1363701049801,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1363701050910,"patch":[[{"diffs":[[1,"#ifndef NODE_H\r\n#define NODE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Department of Electrical and Computer Engineering\r\n * University of Waterloo\r\n * Calender Term of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"ece250.h\"\r\n\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTree;\r\n\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTreeNode{\r\n    private:\r\n\t\tType       x_value;\t\r\n        \r\n\t\r\n\t\tBinarySearchTreeNode<Type> *right;\r\n\t\tBinarySearchTreeNode<Type> *left;\r\n\t\t\r\n\t\t\r\n\r\n\tpublic:\r\n           \r\n         \r\n  \r\n\t\tBinarySearchTreeNode<Type>( const Type  & = Type());\r\n\r\n\t\tType retrieve() const;\r\n\t\r\n\r\n\t\tBinarySearchTreeNode *get_right() const;\r\n\t\tBinarySearchTreeNode *get_left() const;\r\n\t\t\r\n\r\n\t\tType min() const;\r\n\t\r\n\t\tType max() const;\r\n\r\n\t\tType sum() const;\r\n\t\t\r\n\r\n\t\tbool member( const Type & ) const;\r\n\r\n\t\tbool insert( const Type & );\r\n\t\tvoid clear();\r\n\r\n\tfriend class BinarySearchTree<Type>;\r\n};\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type>::BinarySearchTreeNode( const Type  &x ):\r\nx_value( x ),  \r\nright( 0 ),\r\nleft( 0 )\r\n{\r\n\t// empty constructor\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::retrieve() const {\r\n\treturn x_value;\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTreeNode<Type>::get_left() const {\r\n\treturn left;\r\n}\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTreeNode<Type>::get_right() const {\r\n\treturn right;\r\n}\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::min() const {\r\n\t// you may use std::min\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::max() const {\r\n\t// you may use std::max\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::sum() const {\r\n\tif ( this == 0 ) {\r\n\t\t// hint...\r\n\t\treturn 0;\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTreeNode<Type>::member( const Type &x) const {\r\n\tif ( this == 0 ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTreeNode<Type>::insert(  const Type &x ) {\r\n\treturn false;\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTreeNode<Type>::clear() {\r\n}\r\n\r\n// Is an error showing up in ece250.h or elsewhere?\r\n// Did you forget a closing '}' ?\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2510}]],"length":2510,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363870077335,"patch":[[{"diffs":[[0,"#ifndef "],[-1,"NODE"],[1,"EXCEPTION"],[0,"_H\r\n#def"]],"start1":0,"start2":0,"length1":20,"length2":25},{"diffs":[[0,"ine "],[-1,"NODE"],[1,"EXCEPTION"],[0,"_H\r\n"]],"start1":25,"start2":25,"length1":12,"length2":17},{"diffs":[[0,"****"],[-1,"**********\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Department of Electrical and Computer Engineering\r\n * University of Waterloo\r\n * Calender Term of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"ece250.h\"\r\n\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTree;\r\n\r\n\r\ntemplate <typename Type>\r\nclass BinarySearchTreeNode{\r\n    private:\r\n\t\tType       x_value;\t\r\n        \r\n\t\r\n\t\tBinarySearchTreeNode<Type> *right;\r\n\t\tBinarySearchTreeNode<Type> *left;\r\n\t\t\r\n\t\t\r\n\r\n\tpublic:\r\n           \r\n         \r\n  \r\n\t\tBinarySearchTreeNode<Type>( const Type  & = Type());\r\n\r\n\t\tType retrieve() const;\r\n\t\r\n\r\n\t\tBinarySearchTreeNode *get_right() const;\r\n\t\tBinarySearchTreeNode *get_left() const;\r\n\t\t\r\n\r\n\t\tType min() const;\r\n\t\r\n\t\tType max() const;\r\n\r\n\t\tType sum() const;\r\n\t\t\r\n\r\n\t\tbool member( const Type & ) const;\r\n\r\n\t\tbool insert( const Type & );\r\n\t\tvoid clear();\r\n\r\n\tfriend class BinarySearchTree<Type>;\r\n};\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type>::BinarySearchTreeNode( const Type  &x ):\r\nx_value( x ),  \r\nright( 0 ),\r\nleft( 0 )\r\n{\r\n\t// empty constructor\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::retrieve() const {\r\n\treturn x_value;\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTreeNode<Type>::get_left() const {\r\n\treturn left"],[1,"\r\n * DO NOT EDIT THIS FILE\r\n *******************************/\r\n\r\nclass ArrayBoundsException {\r\n    // empty class\r\n};\r\n\r\nclass underflow {\r\n\t// empty class\r\n};\r\n\r\nclass overflow {\r\n\t// empty class\r\n}"],[0,";\r\n"],[-1,"}"],[0,"\r\n"],[-1,"\r\ntemplate <typename Type>\r\nBinarySearchTreeNode<Type> *BinarySearchTreeNode<Type>::get_right() const {\r\n\treturn right;\r\n}\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::min() const {\r\n\t// you may use std::min\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::max() const {\r\n\t// you may use std::max\r\n\treturn Type();\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nType BinarySearchTreeNode<Type>::sum() const {\r\n\tif ( this == 0 ) {\r\n\t\t// hint...\r\n\t\treturn 0;\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n\r\n\r\ntemplate <typename Type>\r\nbool BinarySearchTreeNode<Type>::member( const Type &x) const {\r\n\tif ( this == 0 ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn false;"],[1,"class division_by_zero {\r\n\t// emtpy class\r\n};\r\n\r\nclass illegal_argument {\r\n\t// emtpy class"],[0,"\r\n}"],[1,";"],[0,"\r\n\r\n"],[-1,"template <typename Type>\r\nbool BinarySearchTreeNode<Type>::insert(  const Type &x ) {\r\n\treturn false;\r\n}\r\n\r\ntemplate <typename Type>\r\nvoid BinarySearchTreeNode<Type>::clear() {\r\n}\r\n\r\n// Is an error showing up in ece250.h or elsewhere?\r\n// Did you forget a closing '}' ?"],[1,"class out_of_bounds {\r\n\t// emtpy class\r\n};"],[0,"\r\n\r\n"]],"start1":72,"start2":72,"length1":2442,"length2":352}]],"length":430,"saved":false}
