{"ts":1360910090374,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#ifndef DOUBLE_HASH_TABLE_H\n#define DOUBLE_HASH_TABLE_H\n\n/*****************************************\n * UW User ID:  jh9cho\n * Submitted for ECE 250\n * Semester of Submission:  (Winter) 2013\n *\n * By submitting this file, I affirm that\n * I am the author of all modifications to\n * the provided code.\n *****************************************/\n\n#include \"Exception.h\"\n#include \"ece250.h\"\n\nenum state { EMPTY, OCCUPIED, DELETED };\n\ntemplate<typename T>\nclass DoubleHashTable {\n    private:\n\t\tint count;\n\t\tint power;\n\t\tint array_size;\n\t\tT *array;\n\t\tstate *occupied;\n\n\t\tint h1( T const & ) const; // first hash function\n\t\tint h2( T const & ) const; // second hash function\n\n\tpublic:\n\t\tDoubleHashTable( int = 5 );\n\t\t~DoubleHashTable();\n\t\tint size() const;\n\t\tint capacity() const;\n\t\tdouble load_factor() const;\n\t\tbool empty() const;\n\t\tbool member( T const & ) const;\n\t\tT bin( int ) const;\n\n\t\tvoid print() const;\n\n\t\tvoid insert( T const & );\n\t\tbool remove( T const & );\n\t\tvoid clear();\n};\n\ntemplate<typename T >\nDoubleHashTable<T >::DoubleHashTable( int m ):\ncount( 0 ), power( m ),\narray_size( 1 << power ),\narray( new T [array_size] ),\noccupied( new state[array_size] ) {\n    \n\tfor ( int i = 0; i < array_size; ++i ) {\n\t\toccupied[i] = EMPTY;\n\t}\n}\n\ntemplate<typename T >\nDoubleHashTable<T >::~DoubleHashTable() {\n    \n\tdelete[] occupied;\n    delete[] array;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::size() const {\n    \n\treturn count;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::capacity() const {\n    \n\treturn array_size;\n}\n\ntemplate<typename T >\ndouble DoubleHashTable<T >::load_factor() const {\n    \n\treturn (double)count/array_size;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::empty() const {\n    \n    if (count == 0) {\n        return true;\n    }\n    \n\treturn false;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::h1( T const &obj ) const {\n   \n   int h = (int)obj&(array_size-1);\n   \n    while (h < 0) {\n        return h + array_size;\n    }\n    \n\treturn h;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::h2( T const &obj ) const {\n    \n    int h = (int)(obj/array_size)&(array_size-1);\n    \n    while (h < 0) {\n        h = h + array_size;   \n    }\n    \n    if (h%2 == 0) {\n        h += 1;\n    }\n    \n\treturn h;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::member( T const &obj ) const {\n\tint probing = h1(obj);\n    int offset = h2(obj);\n    \n    for (int i=0; i<array_size; i++) {\n        if (array[probing] == obj) {\n            return true;\n        }\n        \n        else if (occupied[probing] == EMPTY) {\n            break;\n        }\n        \n        probing += i*offset;\n    }\n    \n\treturn false;\n}\n\ntemplate<typename T >\nT DoubleHashTable<T >::bin( int n ) const {\n\treturn array[n];\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::insert( T const &obj ) {\n\tif (count == array_size) {\n         throw overflow();\n\t}\n    \n    if (member(obj)) {\n        return;\n    }\n    \n    int probing = h1(obj);\n    int offset = h2(obj);\n    \n    while (occupied[probing] == OCCUPIED) {\n        probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = obj;\n    occupied[probing] = OCCUPIED;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::remove( T const &obj ) {\n    \n    if (!member(obj)) {\n        return false;\n    }\n    \n    int probing = h1(obj);\n    int offset = h2(obj);\n    \n    while (array[probing] != obj) {\n        probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = 0;\n    occupied[probing] = DELETED;\n    count --;\n    \n    return true;\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::clear() {\n    for (int i=0; i<array_size; i++) {\n        array[i] = 0;\n        occupied[i] = EMPTY;\n        count = 0;\n    }\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::print() const {\n    // enter your implemetation here \t\n    return;\n}\n\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":3829}]],"length":3829}
{"contributors":[],"silentsave":false,"ts":1360910085718,"patch":[[{"diffs":[[0,"_TABLE_H"],[1,"\r"],[0,"\n#define"]],"start1":19,"start2":19,"length1":16,"length2":17},{"diffs":[[0,"_TABLE_H"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/******"]],"start1":48,"start2":48,"length1":17,"length2":19},{"diffs":[[0,"********"],[1,"\r"],[0,"\n * UW U"]],"start1":94,"start2":94,"length1":16,"length2":17},{"diffs":[[0,"  jh9cho"],[1,"\r"],[0,"\n * Subm"]],"start1":118,"start2":118,"length1":16,"length2":17},{"diffs":[[0," ECE 250"],[1,"\r"],[0,"\n * Seme"]],"start1":144,"start2":144,"length1":16,"length2":17},{"diffs":[[0,"er) 2013"],[1,"\r"],[0,"\n *"],[1,"\r"],[0,"\n * By s"]],"start1":187,"start2":187,"length1":19,"length2":21},{"diffs":[[0,"irm that"],[1,"\r"],[0,"\n * I am"]],"start1":234,"start2":234,"length1":16,"length2":17},{"diffs":[[0,"tions to"],[1,"\r"],[0,"\n * the "]],"start1":278,"start2":278,"length1":16,"length2":17},{"diffs":[[0,"ed code."],[1,"\r"],[0,"\n ******"]],"start1":301,"start2":301,"length1":16,"length2":17},{"diffs":[[0,"*******/"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#includ"]],"start1":346,"start2":346,"length1":17,"length2":19},{"diffs":[[0,"ption.h\""],[1,"\r"],[0,"\n#includ"]],"start1":372,"start2":372,"length1":16,"length2":17},{"diffs":[[0,"ce250.h\""],[-1,"\n"],[1,"\r\n\r"],[0,"\nenum st"]],"start1":393,"start2":393,"length1":17,"length2":19},{"diffs":[[0,"LETED };"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":437,"start2":437,"length1":17,"length2":19},{"diffs":[[0,"ename T>"],[1,"\r"],[0,"\nclass D"]],"start1":461,"start2":461,"length1":16,"length2":17},{"diffs":[[0,"hTable {"],[1,"\r"],[0,"\n    pri"]],"start1":486,"start2":486,"length1":16,"length2":17},{"diffs":[[0,"private:"],[-1,"\n\t"],[1,"\r\n    "],[0,"\tint cou"]],"start1":500,"start2":500,"length1":18,"length2":22},{"diffs":[[0,"t count;"],[1,"\r"],[0,"\n\t\tint p"]],"start1":517,"start2":517,"length1":16,"length2":17},{"diffs":[[0,"t power;"],[1,"\r"],[0,"\n\t\tint a"]],"start1":531,"start2":531,"length1":16,"length2":17},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n\t\tT *ar"]],"start1":550,"start2":550,"length1":16,"length2":17},{"diffs":[[0," *array;"],[1,"\r"],[0,"\n\t\tstate"]],"start1":563,"start2":563,"length1":16,"length2":17},{"diffs":[[0,"ccupied;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tint h"]],"start1":583,"start2":583,"length1":17,"length2":19},{"diffs":[[0,"function"],[1,"\r"],[0,"\n\t\tint h"]],"start1":638,"start2":638,"length1":16,"length2":17},{"diffs":[[0,"function"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\tpublic"]],"start1":692,"start2":692,"length1":17,"length2":19},{"diffs":[[0,"\tpublic:"],[1,"\r"],[0,"\n\t\tDoubl"]],"start1":704,"start2":704,"length1":16,"length2":17},{"diffs":[[0,"t = 5 );"],[1,"\r"],[0,"\n\t\t~Doub"]],"start1":735,"start2":735,"length1":16,"length2":17},{"diffs":[[0,"Table();"],[1,"\r"],[0,"\n\t\tint s"]],"start1":758,"start2":758,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tint c"]],"start1":779,"start2":779,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tdoubl"]],"start1":804,"start2":804,"length1":16,"length2":17},{"diffs":[[0,"_factor() const;"],[1,"\r"],[0,"\n\t\tbool empty() "]],"start1":827,"start2":827,"length1":32,"length2":33},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tbool "]],"start1":858,"start2":858,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tT bin"]],"start1":893,"start2":893,"length1":16,"length2":17},{"diffs":[[0,"in( int ) const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid print() "]],"start1":908,"start2":908,"length1":33,"length2":35},{"diffs":[[0,") const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid "]],"start1":941,"start2":941,"length1":17,"length2":19},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tbool "]],"start1":972,"start2":972,"length1":16,"length2":17},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tvoid "]],"start1":1001,"start2":1001,"length1":16,"length2":17},{"diffs":[[0,"r();"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntem"]],"start1":1022,"start2":1022,"length1":12,"length2":15},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nDoubleHashTable"]],"start1":1039,"start2":1039,"length1":32,"length2":33},{"diffs":[[0,"int m ):"],[1,"\r"],[0,"\ncount( "]],"start1":1095,"start2":1095,"length1":16,"length2":17},{"diffs":[[0,"er( m ),"],[1,"\r"],[0,"\narray_s"]],"start1":1120,"start2":1120,"length1":16,"length2":17},{"diffs":[[0,"power ),"],[1,"\r"],[0,"\narray( "]],"start1":1147,"start2":1147,"length1":16,"length2":17},{"diffs":[[0,"size] ),"],[1,"\r"],[0,"\noccupie"]],"start1":1177,"start2":1177,"length1":16,"length2":17},{"diffs":[[0,"ize] ) {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tfor ( "]],"start1":1214,"start2":1214,"length1":21,"length2":23},{"diffs":[[0," ++i ) {"],[1,"\r"],[0,"\n\t\toccup"]],"start1":1263,"start2":1263,"length1":16,"length2":17},{"diffs":[[0,"PTY;"],[1,"\r"],[0,"\n\t}"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntem"]],"start1":1291,"start2":1291,"length1":14,"length2":18},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nDoubleH"]],"start1":1319,"start2":1319,"length1":16,"length2":17},{"diffs":[[0,"able() {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tdelete"]],"start1":1362,"start2":1362,"length1":21,"length2":23},{"diffs":[[0,"ccupied;"],[1,"\r"],[0,"\n    del"]],"start1":1389,"start2":1389,"length1":16,"length2":17},{"diffs":[[0,"] array;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1410,"start2":1410,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1430,"start2":1430,"length1":32,"length2":33},{"diffs":[[0,"::size() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn count;\n"]],"start1":1471,"start2":1471,"length1":37,"length2":39},{"diffs":[[0,"n count;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1501,"start2":1501,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1521,"start2":1521,"length1":32,"length2":33},{"diffs":[[0,"pacity() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn array_s"]],"start1":1566,"start2":1566,"length1":37,"length2":39},{"diffs":[[0,"turn array_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1593,"start2":1593,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\ndouble "]],"start1":1629,"start2":1629,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":1680,"start2":1680,"length1":21,"length2":23},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1721,"start2":1721,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":1741,"start2":1741,"length1":32,"length2":33},{"diffs":[[0,"ty() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if (cou"]],"start1":1788,"start2":1788,"length1":29,"length2":31},{"diffs":[[0,"f (count == 0) {"],[1,"\r"],[0,"\n        return "]],"start1":1813,"start2":1813,"length1":32,"length2":33},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":1843,"start2":1843,"length1":27,"length2":30},{"diffs":[[0,"\r\n\treturn false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1864,"start2":1864,"length1":35,"length2":38},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1892,"start2":1892,"length1":32,"length2":33},{"diffs":[[0," const {"],[1,"\r"],[0,"\n   "],[1,"\r"],[0,"\n   int "]],"start1":1953,"start2":1953,"length1":20,"length2":22},{"diffs":[[0,"h = "],[-1,"(int)"],[1,"static_cast<int>("],[0,"obj"],[1,")"],[0,"&(ar"]],"start1":1975,"start2":1975,"length1":16,"length2":29},{"diffs":[[0,"size-1);"],[1,"\r"],[0,"\n   "],[1,"\r"],[0,"\n    whi"]],"start1":2008,"start2":2008,"length1":20,"length2":22},{"diffs":[[0," while (h < 0) {"],[1,"\r"],[0,"\n        return "]],"start1":2026,"start2":2026,"length1":32,"length2":33},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":2066,"start2":2066,"length1":27,"length2":30},{"diffs":[[0,"    \r\n\treturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":2083,"start2":2083,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nint Dou"]],"start1":2119,"start2":2119,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    int"]],"start1":2172,"start2":2172,"length1":21,"length2":23},{"diffs":[[0,"int h = "],[-1,"(int"],[1,"static_cast<int>(obj"],[0,")(obj/ar"]],"start1":2192,"start2":2192,"length1":20,"length2":36},{"diffs":[[0,"size-1);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    whi"]],"start1":2245,"start2":2245,"length1":21,"length2":23},{"diffs":[[0,"le (h < 0) {"],[1,"\r"],[0,"\n        h ="]],"start1":2268,"start2":2268,"length1":24,"length2":25},{"diffs":[[0,"size;   "],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if "]],"start1":2304,"start2":2304,"length1":27,"length2":30},{"diffs":[[0," == 0) {"],[1,"\r"],[0,"\n       "]],"start1":2338,"start2":2338,"length1":16,"length2":17},{"diffs":[[0," h += 1;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":2355,"start2":2355,"length1":27,"length2":30},{"diffs":[[0,"eturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2380,"start2":2380,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":2400,"start2":2400,"length1":32,"length2":33},{"diffs":[[0," const {"],[1,"\r"],[0,"\n\tint pr"]],"start1":2466,"start2":2466,"length1":16,"length2":17},{"diffs":[[0,"obing = h1(obj);"],[1,"\r"],[0,"\n    int offset "]],"start1":2483,"start2":2483,"length1":32,"length2":33},{"diffs":[[0,"t = h2(obj);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    for (in"]],"start1":2514,"start2":2514,"length1":29,"length2":31},{"diffs":[[0,"ray_size; i++) {"],[1,"\r"],[0,"\n        if (arr"]],"start1":2556,"start2":2556,"length1":32,"length2":33},{"diffs":[[0,"obing] == obj) {"],[1,"\r"],[0,"\n            ret"]],"start1":2594,"start2":2594,"length1":32,"length2":33},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n       "]],"start1":2628,"start2":2628,"length1":16,"length2":17},{"diffs":[[0,"true;\r\n        }"],[1,"\r"],[0,"\n        \n      "]],"start1":2631,"start2":2631,"length1":32,"length2":33},{"diffs":[[0,"     }\r\n        "],[1,"\r"],[0,"\n        else if"]],"start1":2641,"start2":2641,"length1":32,"length2":33},{"diffs":[[0,"EMPTY) {"],[1,"\r"],[0,"\n       "]],"start1":2697,"start2":2697,"length1":16,"length2":17},{"diffs":[[0,"  break;"],[1,"\r"],[0,"\n       "]],"start1":2717,"start2":2717,"length1":16,"length2":17},{"diffs":[[0,";\r\n        }"],[1,"\r"],[0,"\n        \n  "]],"start1":2724,"start2":2724,"length1":24,"length2":25},{"diffs":[[0," }\r\n        "],[1,"\r"],[0,"\n        pro"]],"start1":2734,"start2":2734,"length1":24,"length2":25},{"diffs":[[0,"ing "],[-1,"+"],[0,"= "],[-1,"i*offset;"],[1,"(probing + offset) & (array_size - 1);\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tre"]],"start1":2760,"start2":2760,"length1":31,"length2":62},{"diffs":[[0,"n false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2825,"start2":2825,"length1":19,"length2":22},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nT Doubl"]],"start1":2853,"start2":2853,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n\treturn"]],"start1":2898,"start2":2898,"length1":16,"length2":17},{"diffs":[[0,"rray[n];"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2917,"start2":2917,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":2937,"start2":2937,"length1":32,"length2":33},{"diffs":[[0,"&obj ) {"],[1,"\r"],[0,"\n\tif (co"]],"start1":2997,"start2":2997,"length1":16,"length2":17},{"diffs":[[0,"_size) {"],[1,"\r"],[0,"\n       "]],"start1":3026,"start2":3026,"length1":16,"length2":17},{"diffs":[[0,"w();"],[1,"\r"],[0,"\n\t}"],[1," else {\r"],[0,"\n    "],[-1,"\n"],[0,"    "]],"start1":3058,"start2":3058,"length1":17,"length2":25},{"diffs":[[0," (member(obj)) {"],[1,"\r"],[0,"\n        return;"]],"start1":3085,"start2":3085,"length1":32,"length2":33},{"diffs":[[0,"    "],[1,"    "],[0,"return;"],[-1,"\n    }\n"],[1,"\r\n        }\r\n  "],[0,"    "],[1,"  \r"],[0,"\n"],[1,"    "],[0,"    "]],"start1":3107,"start2":3107,"length1":27,"length2":46},{"diffs":[[0,"obing = h1(obj);"],[-1,"\n"],[1,"\r\n   "],[0,"    "],[1," "],[0,"int offset = h2("]],"start1":3159,"start2":3159,"length1":37,"length2":42},{"diffs":[[0,"h2(obj);"],[-1,"\n    \n    while"],[1,"\r\n        \r\n        for (int i=0; i<array_size; i++) {\r\n            if"],[0," (occupi"]],"start1":3198,"start2":3198,"length1":31,"length2":86},{"diffs":[[0,"UPIED) {"],[-1,"\n"],[1,"\r\n       "],[0,"        "],[1," "],[0,"probing "]],"start1":3302,"start2":3302,"length1":25,"length2":34},{"diffs":[[0,"obing = (probing"],[-1,"+"],[1," + "],[0,"offset) & (array"]],"start1":3330,"start2":3330,"length1":33,"length2":35},{"diffs":[[0,"ray_size"],[-1,"-1);\n    }\n    \n"],[1," - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n    "],[0,"    arra"]],"start1":3362,"start2":3362,"length1":32,"length2":110},{"diffs":[[0,"] = obj;"],[-1,"\n"],[1,"\r\n   "],[0,"    "],[1," "],[0,"occupied"]],"start1":3481,"start2":3481,"length1":21,"length2":26},{"diffs":[[0,"CCUPIED;"],[-1,"\n}\n"],[1,"\r\n        count ++;   \r\n\t}\r\n}\r\n\r"],[0,"\ntemplat"]],"start1":3520,"start2":3520,"length1":19,"length2":48},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nbool Do"]],"start1":3574,"start2":3574,"length1":16,"length2":17},{"diffs":[[0,"&obj ) {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if "]],"start1":3626,"start2":3626,"length1":21,"length2":23},{"diffs":[[0,"(obj)) {"],[1,"\r"],[0,"\n       "]],"start1":3657,"start2":3657,"length1":16,"length2":17},{"diffs":[[0,"n false;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    int"]],"start1":3680,"start2":3680,"length1":27,"length2":30},{"diffs":[[0,"g = h1(obj);"],[1,"\r"],[0,"\n    int off"]],"start1":3717,"start2":3717,"length1":24,"length2":25},{"diffs":[[0,"h2(obj);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    whi"]],"start1":3748,"start2":3748,"length1":21,"length2":23},{"diffs":[[0,"= obj) {"],[1,"\r"],[0,"\n       "]],"start1":3791,"start2":3791,"length1":16,"length2":17},{"diffs":[[0,"(probing"],[-1,"+"],[1," + "],[0,"offset) "]],"start1":3819,"start2":3819,"length1":17,"length2":19},{"diffs":[[0,"size"],[-1,"-"],[1," - "],[0,"1);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n   "]],"start1":3847,"start2":3847,"length1":23,"length2":28},{"diffs":[[0,"robing] = 0;"],[1,"\r"],[0,"\n    occupie"]],"start1":3883,"start2":3883,"length1":24,"length2":25},{"diffs":[[0,"DELETED;"],[1,"\r"],[0,"\n    cou"]],"start1":3921,"start2":3921,"length1":16,"length2":17},{"diffs":[[0,"ount --;"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    ret"]],"start1":3936,"start2":3936,"length1":21,"length2":23},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":3960,"start2":3960,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":3980,"start2":3980,"length1":32,"length2":33},{"diffs":[[0,"lear() {"],[1,"\r"],[0,"\n    for"]],"start1":4025,"start2":4025,"length1":16,"length2":17},{"diffs":[[0,"; i++) {"],[1,"\r"],[0,"\n       "]],"start1":4065,"start2":4065,"length1":16,"length2":17},{"diffs":[[0,"rray[i] = 0;"],[1,"\r"],[0,"\n        occ"]],"start1":4084,"start2":4084,"length1":24,"length2":25},{"diffs":[[0,"= EMPTY;"],[1,"\r"],[0,"\n    "],[1,"}\r\n    \r\n"],[0,"    coun"]],"start1":4118,"start2":4118,"length1":21,"length2":31},{"diffs":[[0,"= 0;"],[-1,"\n    }\n}\n"],[1,"\r\n}\r\n\r"],[0,"\ntem"]],"start1":4151,"start2":4151,"length1":17,"length2":14},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nvoid Do"]],"start1":4175,"start2":4175,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    // "]],"start1":4218,"start2":4218,"length1":16,"length2":17},{"diffs":[[0,"n here \t"],[1,"\r"],[0,"\n    ret"]],"start1":4258,"start2":4258,"length1":16,"length2":17},{"diffs":[[0,"urn;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#en"]],"start1":4275,"start2":4275,"length1":11,"length2":14}]],"length":4292,"saved":false}
{"ts":1360910266567,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"\r\n    "],[0,"if"],[-1," "],[0,"(cou"]],"start1":3003,"start2":3003,"length1":12,"length2":16},{"diffs":[[0,"ay_size)"],[-1," {\r\n         "],[1,"\r\n\t{\r\n\t\t"],[0,"throw ov"]],"start1":3028,"start2":3028,"length1":29,"length2":24},{"diffs":[[0,"\r\n\t}"],[-1," "],[1,"\r\n\t"],[0,"else"],[-1," {\r\n        "],[1,"\r\n\t{\r\n\t\t"],[0,"if"],[-1," "],[0,"(mem"]],"start1":3061,"start2":3061,"length1":28,"length2":25},{"diffs":[[0,"obj)"],[-1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":3090,"start2":3090,"length1":152,"length2":149},{"diffs":[[0,"++) "],[-1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[0,"occu"]],"start1":3248,"start2":3248,"length1":248,"length2":511},{"diffs":[[0,"\t\toccupied[p"],[-1,"robing"],[1,"osition"],[0,"] = OCCUPIED"]],"start1":3753,"start2":3753,"length1":30,"length2":31},{"diffs":[[0,"IED;"],[-1,"\r\n        count ++;   "],[1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n"],[0,"\r\n\t}"]],"start1":3781,"start2":3781,"length1":30,"length2":191}]],"length":4710,"saved":false}
{"ts":1360910326732,"patch":[[{"diffs":[[0,"bj ) {\r\n"],[-1,"\r\n    "],[1,"\t"],[0,"if"],[1," "],[0,"(count ="]],"start1":2999,"start2":2999,"length1":24,"length2":20},{"diffs":[[0,"ay_size)"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n         "],[0,"throw ov"]],"start1":3024,"start2":3024,"length1":24,"length2":29},{"diffs":[[0,"\r\n\t}"],[-1,"\r\n\t"],[1," "],[0,"else"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n        "],[0,"if"],[1," "],[0,"(mem"]],"start1":3062,"start2":3062,"length1":25,"length2":28},{"diffs":[[0,"obj)"],[-1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[0,"for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":3094,"start2":3094,"length1":149,"length2":152},{"diffs":[[0,"++) "],[-1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[0,"occu"]],"start1":3255,"start2":3255,"length1":511,"length2":248},{"diffs":[[0,"cupied[p"],[-1,"osition"],[1,"robing"],[0,"] = OCCU"]],"start1":3501,"start2":3501,"length1":23,"length2":22},{"diffs":[[0,"IED;"],[-1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n"],[1,"\r\n        count ++;   "],[0,"\r\n\t}"]],"start1":3524,"start2":3524,"length1":191,"length2":30}]],"length":4292,"saved":false}
{"ts":1360910374582,"patch":[[{"diffs":[[0," {\r\n"],[-1,"   \r\n   int h"],[1,"int result"],[0," = s"]],"start1":1959,"start2":1959,"length1":21,"length2":18},{"diffs":[[0,"nt>(obj)"],[-1,"&"],[1," & "],[0,"(array_s"]],"start1":1989,"start2":1989,"length1":17,"length2":19},{"diffs":[[0,"-1);"],[-1,"\r\n   \r\n    while (h < 0) {\r\n        return h"],[1," //h1 i%M\r\nif(result < 0) //if the result is negative add M\r\n{ \r\n    result = result"],[0," + a"]],"start1":2011,"start2":2011,"length1":52,"length2":92},{"diffs":[[0,"rray_size;\r\n"],[-1,"    }\r\n    "],[1,"\r\n}"],[0,"\r\n\treturn h;"]],"start1":2103,"start2":2103,"length1":35,"length2":27},{"diffs":[[0,";\r\n\r\n}\r\n\treturn "],[-1,"h;"],[1,"result; "],[0,"\r\n}\r\n\r\ntemplate<"]],"start1":2112,"start2":2112,"length1":34,"length2":40},{"diffs":[[0," {\r\n"],[-1,"    \r\n    int h"],[1,"\tint result2"],[0," = "],[1,"("],[0,"stat"]],"start1":2215,"start2":2215,"length1":26,"length2":24},{"diffs":[[0,"(obj"],[-1,")(obj"],[0,"/arr"]],"start1":2251,"start2":2251,"length1":13,"length2":8},{"diffs":[[0,"ay_size)"],[-1,"&"],[1," & "],[0,"(array_s"]],"start1":2259,"start2":2259,"length1":17,"length2":19},{"diffs":[[0,"size"],[-1,"-1);\r\n    \r\n    while (h < 0) {\r\n        h = h + array_size;   \r\n    }\r\n    \r\n    if (h%2 == 0) {\r\n        h += 1;\r\n    }\r\n    "],[1," - 1)) | 1; //h2 obj/M % M also oring with 1 to make it an odd number always\r\n\tif(result2 < 0)\r\n\t{\r\n\t\tresult2 = result2 + array_size; //if result is negative add M \r\n\t}"],[0,"\r\n\tr"]],"start1":2277,"start2":2277,"length1":135,"length2":176},{"diffs":[[0,"\treturn "],[-1,"h"],[1,"result2"],[0,";\r\n}\r\n\r\n"]],"start1":2451,"start2":2451,"length1":17,"length2":23}]],"length":4371,"saved":false}
{"ts":1360910437816,"patch":[[{"diffs":[[0,"onst {\r\n"],[-1,"int result"],[1,"   \r\n   int h"],[0," = stati"]],"start1":1955,"start2":1955,"length1":26,"length2":29},{"diffs":[[0,"nt>(obj)"],[-1," & "],[1,"&"],[0,"(array_s"]],"start1":1992,"start2":1992,"length1":19,"length2":17},{"diffs":[[0,"-1);"],[-1," //h1 i%M\r\nif(result < 0) //if the result is negative add M\r\n{ \r\n    result = result"],[1,"\r\n   \r\n    while (h < 0) {\r\n        return h"],[0," + a"]],"start1":2012,"start2":2012,"length1":92,"length2":52},{"diffs":[[0,"_size;\r\n"],[-1,"\r\n}"],[1,"    }\r\n    "],[0,"\r\n\tretur"]],"start1":2068,"start2":2068,"length1":19,"length2":27},{"diffs":[[0,"urn "],[-1,"result; "],[1,"h;"],[0,"\r\n}\r"]],"start1":2093,"start2":2093,"length1":16,"length2":10},{"diffs":[[0," {\r\n"],[-1,"\tint result2"],[1,"    \r\n    int h"],[0," = "],[-1,"("],[0,"stat"]],"start1":2178,"start2":2178,"length1":24,"length2":26},{"diffs":[[0,"int>(obj"],[1,")(obj"],[0,"/array_s"]],"start1":2212,"start2":2212,"length1":16,"length2":21},{"diffs":[[0,"ay_size)"],[-1," & "],[1,"&"],[0,"(array_s"]],"start1":2229,"start2":2229,"length1":19,"length2":17},{"diffs":[[0,"size"],[-1," - 1)) | 1; //h2 obj/M % M also oring with 1 to make it an odd number always\r\n\tif(result2 < 0)\r\n\t{\r\n\t\tresult2 = result2 + array_size; //if result is negative add M \r\n\t}"],[1,"-1);\r\n    \r\n    while (h < 0) {\r\n        h = h + array_size;   \r\n    }\r\n    \r\n    if (h%2 == 0) {\r\n        h += 1;\r\n    }\r\n    "],[0,"\r\n\tr"]],"start1":2245,"start2":2245,"length1":176,"length2":135},{"diffs":[[0,"urn "],[-1,"result2"],[1,"h"],[0,";\r\n}"]],"start1":2382,"start2":2382,"length1":15,"length2":9}]],"length":4292,"saved":false}
{"ts":1360910441439,"patch":[[{"diffs":[[0,"D:  "],[-1,"jh9cho"],[1,"uwuserid"],[0,"\r\n *"]],"start1":116,"start2":116,"length1":14,"length2":16},{"diffs":[[0,"nter"],[1,"|Spring|Fall"],[0,") 20"],[-1,"13"],[1,"NN"],[0,"\r\n *"]],"start1":187,"start2":187,"length1":14,"length2":26},{"diffs":[[0,"ivate:\r\n"],[-1,"    "],[1,"\t"],[0,"\tint cou"]],"start1":516,"start2":516,"length1":20,"length2":17},{"diffs":[[0,"power ),"],[1," //shifting so array_size is 2^power"],[0,"\r\narray("]],"start1":1158,"start2":1158,"length1":16,"length2":52},{"diffs":[[0,"ize] ) {"],[-1,"\r\n    "],[1," //allocating new state array.\r\n"],[0,"\r\n\tfor ("]],"start1":1261,"start2":1261,"length1":22,"length2":48},{"diffs":[[0,"= EMPTY;"],[1," //setting all the flag to empty in the beginning"],[0,"\r\n\t}\r\n}\r"]],"start1":1360,"start2":1360,"length1":16,"length2":65},{"diffs":[[0,"le() {\r\n"],[-1,"    "],[1,"\tdelete [] array;"],[0,"\r\n\tdelet"]],"start1":1486,"start2":1486,"length1":20,"length2":33},{"diffs":[[0,"\n\tdelete"],[1," "],[0,"[] occup"]],"start1":1512,"start2":1512,"length1":16,"length2":17},{"diffs":[[0,"d;\r\n"],[-1,"    delete[] array;\r\n"],[0,"}\r\n\r"]],"start1":1531,"start2":1531,"length1":29,"length2":8},{"diffs":[[0,"size() const {\r\n"],[-1,"    \r\n"],[0,"\treturn count;\r\n"]],"start1":1588,"start2":1588,"length1":38,"length2":32},{"diffs":[[0,"n count;"],[1," //returns count"],[0,"\r\n}\r\n\r\nt"]],"start1":1610,"start2":1610,"length1":16,"length2":32},{"diffs":[[0,"city() const {\r\n"],[-1,"    \r\n"],[0,"\treturn array_si"]],"start1":1693,"start2":1693,"length1":38,"length2":32},{"diffs":[[0,"turn array_size;"],[1," //returns array_size"],[0,"\r\n}\r\n\r\ntemplate<"]],"start1":1712,"start2":1712,"length1":32,"length2":53},{"diffs":[[0," {\r\n"],[-1,"    \r\n"],[0,"\treturn "],[-1,"("],[1,"static_cast<"],[0,"double"],[-1,")"],[1,">("],[0,"count"],[-1,"/array_size;"],[1,")/static_cast<double>(array_size); //casting values to double because division between two integers might result a double value."],[0,"\r\n}\r"]],"start1":1826,"start2":1826,"length1":47,"length2":169},{"diffs":[[0,"onst {\r\n"],[-1,"    \r\n"],[0,"    if"],[-1," "],[0,"(count ="]],"start1":2056,"start2":2056,"length1":29,"length2":22},{"diffs":[[0," 0) "],[-1,"{\r\n        return true;\r\n    }\r\n    \r\n"],[1,"//if the count is zero, the hash is empty\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t"],[0,"\tret"]],"start1":2079,"start2":2079,"length1":46,"length2":87},{"diffs":[[0,"\treturn false;\r\n"],[1,"\t}\r\n"],[0,"}\r\n\r\ntemplate<ty"]],"start1":2162,"start2":2162,"length1":32,"length2":36},{"diffs":[[0," {\r\n"],[-1,"   \r\n   int h"],[1,"int result"],[0," = s"]],"start1":2259,"start2":2259,"length1":21,"length2":18},{"diffs":[[0,"nt>(obj)"],[-1,"&"],[1," & "],[0,"(array_s"]],"start1":2289,"start2":2289,"length1":17,"length2":19},{"diffs":[[0,"-1);"],[-1,"\r\n   \r\n    while (h < 0) {\r\n        return h"],[1," //h1 i%M\r\nif(result < 0) //if the result is negative add M\r\n{ \r\n\tresult = result"],[0," + a"]],"start1":2311,"start2":2311,"length1":52,"length2":89},{"diffs":[[0,"_size;\r\n"],[-1,"    }\r\n    "],[1,"\r\n}"],[0,"\r\n\tretur"]],"start1":2404,"start2":2404,"length1":27,"length2":19},{"diffs":[[0,";\r\n\r\n}\r\n\treturn "],[-1,"h;"],[1,"result; "],[0,"\r\n}\r\n\r\ntemplate<"]],"start1":2409,"start2":2409,"length1":34,"length2":40},{"diffs":[[0," {\r\n"],[-1,"    \r\n    int h"],[1,"\tint result2"],[0," = "],[1,"("],[0,"stat"]],"start1":2512,"start2":2512,"length1":26,"length2":24},{"diffs":[[0,"(obj"],[-1,")(obj"],[0,"/arr"]],"start1":2548,"start2":2548,"length1":13,"length2":8},{"diffs":[[0,"ay_size)"],[-1,"&"],[1," & "],[0,"(array_s"]],"start1":2556,"start2":2556,"length1":17,"length2":19},{"diffs":[[0,"size"],[-1,"-1);\r\n    \r\n    while (h < 0) {\r\n        h = h + array_size;   \r\n    }\r\n    \r\n    if (h%2 == 0) {\r\n        h += 1;\r\n    }\r\n    "],[1," - 1)) | 1; //h2 obj/M % M also oring with 1 to make it an odd number always\r\n\tif(result2 < 0)\r\n\t{\r\n\t\tresult2 = result2 + array_size; //if result is negative add M \r\n\t}"],[0,"\r\n\tr"]],"start1":2574,"start2":2574,"length1":135,"length2":176},{"diffs":[[0,"\treturn "],[-1,"h"],[1,"result2"],[0,";\r\n}\r\n\r\n"]],"start1":2748,"start2":2748,"length1":17,"length2":23},{"diffs":[[0,"st {"],[-1,"\r\n\tint probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    "],[1," //check if the obj is in the HASH\r\n\tint h1status = h1(obj); //running h1 with obj\r\n\tint h2status = h2(obj); //running h2 with obj\r\n\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":2846,"start2":2846,"length1":88,"length2":160},{"diffs":[[0,"++) "],[-1,"{\r\n        if (array[probing] == obj) {\r\n            return true;\r\n        }\r\n        \r\n        "],[1,"//looping through the whole array\r\n\t{\r\n\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\tposition = position & (array_size-1); //modding the position by M because it might go over M\r\n\t\tif(array[position] == obj &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t{\r\n\t\t\treturn true; //return true\r\n\t\t}\r\n\t\t"],[0,"else"]],"start1":3015,"start2":3015,"length1":104,"length2":378},{"diffs":[[0," (occupied[p"],[-1,"robing"],[1,"osition"],[0,"] == EMPTY) "]],"start1":3396,"start2":3396,"length1":30,"length2":31},{"diffs":[[0,"TY) "],[-1,"{\r\n            break;\r\n        }\r\n        \r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    "],[1,"//if the position is empty then, for sure the value does not exist\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}"],[0,"\r\n"],[1,"\t"],[0,"\tret"]],"start1":3423,"start2":3423,"length1":123,"length2":109},{"diffs":[[0,"urn false;\r\n"],[1,"\r\n\r\n"],[0,"}\r\n\r\ntemplat"]],"start1":3532,"start2":3532,"length1":24,"length2":28},{"diffs":[[0," int n ) const {"],[1,"\t                 "],[0,"\r\n\treturn array["]],"start1":3603,"start2":3603,"length1":32,"length2":50},{"diffs":[[0,"rray[n];"],[1," //just returning the nth position element"],[0,"\r\n}\r\n\r\nt"]],"start1":3648,"start2":3648,"length1":16,"length2":58},{"diffs":[[0," {\r\n"],[1,"\r\n"],[0,"\tif"],[-1," "],[0,"(cou"]],"start1":3776,"start2":3776,"length1":12,"length2":13},{"diffs":[[0,"ay_size)"],[-1," {\r\n         "],[1,"\r\n\t{\r\n\t\t"],[0,"throw ov"]],"start1":3798,"start2":3798,"length1":29,"length2":24},{"diffs":[[0,"\r\n\t}"],[-1," "],[1,"\r\n\t"],[0,"else"],[-1," {\r\n        "],[1,"\r\n\t{\r\n\t\t"],[0,"if"],[-1," "],[0,"(mem"]],"start1":3831,"start2":3831,"length1":28,"length2":25},{"diffs":[[0,"obj)"],[-1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":3860,"start2":3860,"length1":152,"length2":149},{"diffs":[[0,"++) "],[-1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[0,"occu"]],"start1":4018,"start2":4018,"length1":248,"length2":511},{"diffs":[[0,"\t\toccupied[p"],[-1,"robing"],[1,"osition"],[0,"] = OCCUPIED"]],"start1":4523,"start2":4523,"length1":30,"length2":31},{"diffs":[[0,"IED;"],[-1,"\r\n        count ++;   \r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n    \r\n    if (!member(obj)) {\r\n        return false;\r\n    }\r\n    \r\n    int probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    while (array[probing] != obj) {\r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    \r\n    array[probing] = 0;\r\n    "],[1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n\tif(member(obj) == false)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\tint h2status = h2(obj); //running h2 with obj\r\n\t\tfor(int i = 0; i < array_size; i++) //looping through the whole array\r\n\t\t{\r\n\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\tposition = position % array_size; //modding the position by M because it might go over M\r\n\t\t\tif(array[position] == obj &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t\t{\t\t\r\n\t\t\t\tarray[position] = 0; //setting the element to zero; clearing\r\n\t\t\t\t"],[0,"occu"]],"start1":4551,"start2":4551,"length1":381,"length2":881},{"diffs":[[0,"ed[p"],[-1,"robing"],[1,"osition"],[0,"] = "]],"start1":5434,"start2":5434,"length1":14,"length2":15},{"diffs":[[0,"TED;"],[-1,"\r\n    "],[1," //setting flag to deleted\r\n\t\t\t\t"],[0,"count"],[-1," "],[0,"--;"],[-1,"\r\n    \r\n    "],[1," //decrementing counter\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn true; //"],[0,"retu"]],"start1":5453,"start2":5453,"length1":35,"length2":104},{"diffs":[[0,"urn true"],[-1,";"],[1,"\r\n\r\n\t}"],[0,"\r\n}\r\n\r\nt"]],"start1":5556,"start2":5556,"length1":17,"length2":22},{"diffs":[[0," {\r\n"],[-1,"   "],[1,"\t"],[0," for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":5633,"start2":5633,"length1":28,"length2":29},{"diffs":[[0,"i++)"],[1,"\r\n\t"],[0," {\r\n"],[-1,"       "],[1,"\t\t"],[0," arr"]],"start1":5670,"start2":5670,"length1":19,"length2":17},{"diffs":[[0,"= 0;"],[-1,"\r\n        occupied[i] = EMPTY;\r\n    }\r\n    \r\n   "],[1," //setting everything to zero\r\n\t\t occupied[i] = EMPTY; //setting all the flag to empty\r\n\t }\r\n\t"],[0," cou"]],"start1":5693,"start2":5693,"length1":56,"length2":102},{"diffs":[[0,"t = 0;\r\n"],[1,"\r\n"],[0,"}\r\n\r\ntem"]],"start1":5796,"start2":5796,"length1":16,"length2":18},{"diffs":[[0,"    "],[-1,"// enter your implemetation here \t\r\n    "],[1,"  for(int i = 0; i < array_size; i++)\r\n\t  {\r\n\t\t  std::cout << array[i] << std::endl;\r\n\t  }\r\n\t"],[0,"retu"]],"start1":5877,"start2":5877,"length1":48,"length2":101}]],"length":5994,"saved":false}
{"ts":1360910569068,"patch":[[{"diffs":[[0,"D:  "],[-1,"uwuserid"],[1,"jh9cho"],[0,"\r\n *"]],"start1":116,"start2":116,"length1":16,"length2":14},{"diffs":[[0,"nter"],[-1,"|Spring|Fall"],[0,") 20"],[-1,"NN"],[1,"13"],[0,"\r\n *"]],"start1":185,"start2":185,"length1":26,"length2":14},{"diffs":[[0,"ivate:\r\n"],[-1,"\t"],[1,"    "],[0,"\tint cou"]],"start1":502,"start2":502,"length1":17,"length2":20},{"diffs":[[0,"r ),"],[-1," //shifting so array_size is 2^power"],[0,"\r\nar"]],"start1":1151,"start2":1151,"length1":44,"length2":8},{"diffs":[[0," ) {"],[-1," //allocating new state array.\r\n"],[1,"\r\n    "],[0,"\r\n\tf"]],"start1":1218,"start2":1218,"length1":40,"length2":14},{"diffs":[[0,"PTY;"],[-1," //setting all the flag to empty in the beginning"],[0,"\r\n\t}"]],"start1":1291,"start2":1291,"length1":57,"length2":8},{"diffs":[[0," {\r\n"],[1,"    \r\n"],[0,"\tdelete"],[-1," "],[0,"[] "],[-1,"array;\r\n\t"],[1,"occupied;\r\n    "],[0,"delete"],[-1," "],[0,"[] "],[-1,"occupied"],[1,"array"],[0,";\r\n}"]],"start1":1368,"start2":1368,"length1":46,"length2":53},{"diffs":[[0,"size() const {\r\n"],[1,"    \r\n"],[0,"\treturn count; /"]],"start1":1473,"start2":1473,"length1":32,"length2":38},{"diffs":[[0,"unt;"],[-1," //returns count"],[0,"\r\n}\r"]],"start1":1505,"start2":1505,"length1":24,"length2":8},{"diffs":[[0,"city() const {\r\n"],[1,"    \r\n"],[0,"\treturn array_si"]],"start1":1568,"start2":1568,"length1":32,"length2":38},{"diffs":[[0,"ize;"],[-1," //returns array_size"],[0,"\r\n}\r"]],"start1":1605,"start2":1605,"length1":29,"length2":8},{"diffs":[[0," {\r\n"],[1,"    \r\n"],[0,"\treturn "],[-1,"static_cast<"],[1,"("],[0,"double"],[-1,">("],[1,")"],[0,"count"],[-1,")/static_cast<double>(array_size); //casting values to double because division between two integers might result a double value."],[1,"/array_size;"],[0,"\r\n}\r"]],"start1":1686,"start2":1686,"length1":169,"length2":47},{"diffs":[[0," {\r\n"],[1,"    \r\n"],[0,"    if"],[1," "],[0,"(cou"]],"start1":1798,"start2":1798,"length1":14,"length2":21},{"diffs":[[0," 0) "],[-1,"//if the count is zero, the hash is empty\r\n\t{\r\n\t\t"],[1,"{\r\n        "],[0,"retu"]],"start1":1824,"start2":1824,"length1":57,"length2":19},{"diffs":[[0," true;\r\n"],[-1,"\t}\r\n\telse\r\n\t{"],[1,"    }\r\n    "],[0,"\r\n"],[-1,"\t"],[0,"\treturn "]],"start1":1845,"start2":1845,"length1":32,"length2":29},{"diffs":[[0,"false;\r\n"],[-1,"\t}\r\n"],[0,"}\r\n\r\ntem"]],"start1":1874,"start2":1874,"length1":20,"length2":16},{"diffs":[[0,"onst {\r\n"],[-1,"int result"],[1,"   \r\n   int h"],[0," = stati"]],"start1":1955,"start2":1955,"length1":26,"length2":29},{"diffs":[[0,"nt>(obj)"],[-1," & "],[1,"&"],[0,"(array_s"]],"start1":1992,"start2":1992,"length1":19,"length2":17},{"diffs":[[0,"-1);"],[-1," //h1 i%M\r\nif(result < 0) //if the result is negative add M\r\n{ \r\n\tresult = result"],[1,"\r\n   \r\n    while (h < 0) {\r\n        return h"],[0," + a"]],"start1":2012,"start2":2012,"length1":89,"length2":52},{"diffs":[[0,"_size;\r\n"],[-1,"\r\n}"],[1,"    }\r\n    "],[0,"\r\n\tretur"]],"start1":2068,"start2":2068,"length1":19,"length2":27},{"diffs":[[0,"urn "],[-1,"result; "],[1,"h;"],[0,"\r\n}\r"]],"start1":2093,"start2":2093,"length1":16,"length2":10},{"diffs":[[0," {\r\n"],[-1,"\tint result2"],[1,"    \r\n    int h"],[0," = "],[-1,"("],[0,"stat"]],"start1":2178,"start2":2178,"length1":24,"length2":26},{"diffs":[[0,"int>(obj"],[1,")(obj"],[0,"/array_s"]],"start1":2212,"start2":2212,"length1":16,"length2":21},{"diffs":[[0,"ay_size)"],[-1," & "],[1,"&"],[0,"(array_s"]],"start1":2229,"start2":2229,"length1":19,"length2":17},{"diffs":[[0,"size"],[-1," - 1)) | 1; //h2 obj/M % M also oring with 1 to make it an odd number always\r\n\tif(result2 < 0)\r\n\t{\r\n\t\tresult2 = result2 + array_size; //if result is negative add M \r\n\t}"],[1,"-1);\r\n    \r\n    while (h < 0) {\r\n        h = h + array_size;   \r\n    }\r\n    \r\n    if (h%2 == 0) {\r\n        h += 1;\r\n    }\r\n    "],[0,"\r\n\tr"]],"start1":2245,"start2":2245,"length1":176,"length2":135},{"diffs":[[0,"urn "],[-1,"result2"],[1,"h"],[0,";\r\n}"]],"start1":2382,"start2":2382,"length1":15,"length2":9},{"diffs":[[0,"st {"],[-1," //check if the obj is in the HASH\r\n\tint h1status = h1(obj); //running h1 with obj\r\n\tint h2status = h2(obj); //running h2 with obj\r\n\t"],[1,"\r\n\tint probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    "],[0,"for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":2470,"start2":2470,"length1":160,"length2":88},{"diffs":[[0,"++) "],[-1,"//looping through the whole array\r\n\t{\r\n\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\tposition = position & (array_size-1); //modding the position by M because it might go over M\r\n\t\tif"],[1,"{\r\n        if "],[0,"(array[p"],[-1,"osition"],[1,"robing"],[0,"] == obj"],[-1," &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t{\r\n\t\t\treturn true; //return true\r\n\t\t}\r\n\t\t"],[1,") {\r\n            return true;\r\n        }\r\n        \r\n        "],[0,"else"]],"start1":2567,"start2":2567,"length1":378,"length2":104},{"diffs":[[0,"e if (occupied[p"],[-1,"osition"],[1,"robing"],[0,"] == EMPTY) //if"]],"start1":2670,"start2":2670,"length1":39,"length2":38},{"diffs":[[0,"TY) "],[-1,"//if the position is empty then, for sure the value does not exist\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}"],[1,"{\r\n            break;\r\n        }\r\n        \r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    "],[0,"\r\n"],[-1,"\t"],[0,"\tret"]],"start1":2700,"start2":2700,"length1":109,"length2":123},{"diffs":[[0,"false;\r\n"],[-1,"\r\n\r\n"],[0,"}\r\n\r\ntem"]],"start1":2827,"start2":2827,"length1":20,"length2":16},{"diffs":[[0,"st {"],[-1,"\t                 "],[0,"\r\n\tr"]],"start1":2902,"start2":2902,"length1":26,"length2":8},{"diffs":[[0,"[n];"],[-1," //just returning the nth position element"],[0,"\r\n}\r"]],"start1":2921,"start2":2921,"length1":50,"length2":8},{"diffs":[[0,"bj ) {\r\n"],[-1,"\r\n"],[0,"\tif"],[1," "],[0,"(count ="]],"start1":2999,"start2":2999,"length1":21,"length2":20},{"diffs":[[0,"ay_size)"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n         "],[0,"throw ov"]],"start1":3024,"start2":3024,"length1":24,"length2":29},{"diffs":[[0,"\r\n\t}"],[-1,"\r\n\t"],[1," "],[0,"else"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n        "],[0,"if"],[1," "],[0,"(mem"]],"start1":3062,"start2":3062,"length1":25,"length2":28},{"diffs":[[0,"obj)"],[-1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[0,"for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":3094,"start2":3094,"length1":149,"length2":152},{"diffs":[[0,"++) "],[-1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[0,"occu"]],"start1":3255,"start2":3255,"length1":511,"length2":248},{"diffs":[[0,"  occupied[p"],[-1,"osition"],[1,"robing"],[0,"] = OCCUPIED"]],"start1":3497,"start2":3497,"length1":31,"length2":30},{"diffs":[[0,"IED;"],[-1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n\tif(member(obj) == false)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\tint h2status = h2(obj); //running h2 with obj\r\n\t\tfor(int i = 0; i < array_size; i++) //looping through the who"],[1,"\r\n        count ++;   \r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n    \r\n    if (!member(obj)) {\r\n        return false;\r\n    }\r\n    \r\n    int probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    whi"],[0,"le "],[1,"("],[0,"array"],[-1,"\r\n\t\t{\r\n\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\tposition = position % array_size; //modding the position by M because it might go over M\r\n\t\t\tif(array[position] == obj &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t\t{\t\t\r\n\t\t\t\tarray[position] = 0; //setting the element to zero; clearing\r\n\t\t\t\t"],[1,"[probing] != obj) {\r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    \r\n    array[probing] = 0;\r\n    "],[0,"occu"]],"start1":3524,"start2":3524,"length1":881,"length2":381},{"diffs":[[0,"ed[p"],[-1,"osition"],[1,"robing"],[0,"] = "]],"start1":3907,"start2":3907,"length1":15,"length2":14},{"diffs":[[0,"TED;"],[-1," //setting flag to deleted\r\n\t\t\t\t"],[1,"\r\n    "],[0,"count"],[1," "],[0,"--;"],[-1," //decrementing counter\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn true; //"],[1,"\r\n    \r\n    "],[0,"retu"]],"start1":3925,"start2":3925,"length1":104,"length2":35},{"diffs":[[0,"true"],[-1,"\r\n\r\n\t}"],[1,";"],[0,"\r\n}\r"]],"start1":3963,"start2":3963,"length1":14,"length2":9},{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"   "],[0," for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":4031,"start2":4031,"length1":29,"length2":28},{"diffs":[[0,"i++)"],[-1,"\r\n\t"],[0," {\r\n"],[-1,"\t\t"],[1,"       "],[0," arr"]],"start1":4067,"start2":4067,"length1":17,"length2":19},{"diffs":[[0,"= 0;"],[-1," //setting everything to zero\r\n\t\t occupied[i] = EMPTY; //setting all the flag to empty\r\n\t }\r\n\t"],[1,"\r\n        occupied[i] = EMPTY;\r\n    }\r\n    \r\n   "],[0," cou"]],"start1":4092,"start2":4092,"length1":102,"length2":56},{"diffs":[[0,"t = 0;\r\n"],[-1,"\r\n"],[0,"}\r\n\r\ntem"]],"start1":4149,"start2":4149,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"  for(int i = 0; i < array_size; i++)\r\n\t  {\r\n\t\t  std::cout << array[i] << std::endl;\r\n\t  }\r\n\t"],[1,"// enter your implemetation here \t\r\n    "],[0,"retu"]],"start1":4228,"start2":4228,"length1":101,"length2":48}]],"length":4292,"saved":false}
{"ts":1360910596746,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"\r\n    "],[0,"if"],[-1," "],[0,"(cou"]],"start1":3003,"start2":3003,"length1":12,"length2":16},{"diffs":[[0,"ay_size)"],[-1," {\r\n         "],[1,"\r\n\t{\r\n\t\t"],[0,"throw ov"]],"start1":3028,"start2":3028,"length1":29,"length2":24},{"diffs":[[0,"\r\n\t}"],[-1," "],[1,"\r\n\t"],[0,"else"],[-1," {\r\n        "],[1,"\r\n\t{\r\n\t\t"],[0,"if"],[-1," "],[0,"(mem"]],"start1":3061,"start2":3061,"length1":28,"length2":25},{"diffs":[[0,"obj)"],[-1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":3090,"start2":3090,"length1":152,"length2":149},{"diffs":[[0,"++) "],[-1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[0,"occu"]],"start1":3248,"start2":3248,"length1":248,"length2":511},{"diffs":[[0,"\t\toccupied[p"],[-1,"robing"],[1,"osition"],[0,"] = OCCUPIED"]],"start1":3753,"start2":3753,"length1":30,"length2":31},{"diffs":[[0,"IED;"],[-1,"\r\n        count ++;   "],[1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n"],[0,"\r\n\t}"]],"start1":3781,"start2":3781,"length1":30,"length2":191}]],"length":4710,"saved":false}
{"ts":1360910706857,"patch":[[{"diffs":[[0,"st {"],[-1,"\r\n\tint probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    "],[1," //check if the obj is in the HASH\r\n    int h1status = h1(obj); //running h1 with obj\r\n\tint h2status = h2(obj); //running h2 with obj\r\n\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":2470,"start2":2470,"length1":88,"length2":163},{"diffs":[[0,"++) "],[-1,"{\r\n        if (array[probing] == obj) {\r\n            return true;\r\n        }\r\n        \r\n        "],[1,"//looping through the whole array\r\n\t{\r\n\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\tposition = position & (array_size-1); //modding the position by M because it might go over M\r\n\t\tif(array[position] == obj &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t{\r\n\t\t\treturn true; //return true\r\n\t\t}\r\n\t\t"],[0,"else"]],"start1":2642,"start2":2642,"length1":104,"length2":378},{"diffs":[[0,"cupied[p"],[-1,"robing"],[1,"osition"],[0,"] == EMP"]],"start1":3027,"start2":3027,"length1":22,"length2":23},{"diffs":[[0,"TY) "],[-1,"{\r\n            break;\r\n        }\r\n        \r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    "],[1,"//if the position is empty then, for sure the value does not exist\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}"],[0,"\r\n"],[1,"\t"],[0,"\tret"]],"start1":3050,"start2":3050,"length1":123,"length2":109},{"diffs":[[0,"\treturn false;\r\n"],[1,"\r\n\r\n"],[0,"}\r\n\r\ntemplate<ty"]],"start1":3155,"start2":3155,"length1":32,"length2":36}]],"length":5050,"saved":false}
{"ts":1360910812159,"patch":[[{"diffs":[[0,"st {"],[-1," //check if the obj is in the HASH\r\n    int h1status = h1(obj); //running h1 with obj\r\n\tint h2status = h2(obj); //running h2 with obj\r\n\t"],[1,"\r\n\tint probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    "],[0,"for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":2470,"start2":2470,"length1":163,"length2":88},{"diffs":[[0,"++) "],[-1,"//looping through the whole array\r\n\t{\r\n\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\tposition = position & (array_size-1); //modding the position by M because it might go over M\r\n\t\tif(array[position] == obj &&  occupied[position] == OCCUPIED) //if the value is in the HASH or occupied\r\n\t\t{\r\n\t\t\treturn true; //return true\r\n\t\t}\r\n\t\t"],[1,"{\r\n        if (array[probing] == obj) {\r\n            return true;\r\n        }\r\n        \r\n        "],[0,"else"]],"start1":2567,"start2":2567,"length1":378,"length2":104},{"diffs":[[0,"e if (occupied[p"],[-1,"osition"],[1,"robing"],[0,"] == EMPTY) //if"]],"start1":2670,"start2":2670,"length1":39,"length2":38},{"diffs":[[0,"TY) "],[-1,"//if the position is empty then, for sure the value does not exist\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}"],[1,"{\r\n            break;\r\n        }\r\n        \r\n        probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    "],[0,"\r\n"],[-1,"\t"],[0,"\tret"]],"start1":2700,"start2":2700,"length1":109,"length2":123},{"diffs":[[0,"false;\r\n"],[-1,"\r\n\r\n"],[0,"}\r\n\r\ntem"]],"start1":2827,"start2":2827,"length1":20,"length2":16},{"diffs":[[0,"bj ) {\r\n"],[-1,"\r\n    "],[1,"\t"],[0,"if"],[1," "],[0,"(count ="]],"start1":2999,"start2":2999,"length1":24,"length2":20},{"diffs":[[0,"ay_size)"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n         "],[0,"throw ov"]],"start1":3024,"start2":3024,"length1":24,"length2":29},{"diffs":[[0,"\r\n\t}"],[-1,"\r\n\t"],[1," "],[0,"else"],[-1,"\r\n\t{\r\n\t\t"],[1," {\r\n        "],[0,"if"],[1," "],[0,"(mem"]],"start1":3062,"start2":3062,"length1":25,"length2":28},{"diffs":[[0,"obj)"],[-1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[0,"for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":3094,"start2":3094,"length1":149,"length2":152},{"diffs":[[0,"++) "],[-1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[0,"occu"]],"start1":3255,"start2":3255,"length1":511,"length2":248},{"diffs":[[0,"cupied[p"],[-1,"osition"],[1,"robing"],[0,"] = OCCU"]],"start1":3501,"start2":3501,"length1":23,"length2":22},{"diffs":[[0,"IED;"],[-1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n"],[1,"\r\n        count ++;   "],[0,"\r\n\t}"]],"start1":3524,"start2":3524,"length1":191,"length2":30}]],"length":4292,"saved":false}
{"ts":1360910878077,"patch":[[{"diffs":[[0,"ount ++;"],[-1,"   "],[0,"\r\n\t}\r\n}\r"]],"start1":3539,"start2":3539,"length1":19,"length2":16}]],"length":4289,"saved":false}
{"ts":1360911547537,"patch":[[{"diffs":[[0,"       }"],[-1,"\r\n        \r\n       "],[0," else if"]],"start1":2639,"start2":2639,"length1":35,"length2":16}]],"length":4270,"saved":false}
{"ts":1360911779280,"patch":[[{"diffs":[[0,"(obj"],[-1,")(obj"],[0,"/arr"]],"start1":2216,"start2":2216,"length1":13,"length2":8}]],"length":4265,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360945197514,"patch":[[{"diffs":[[0,"_TABLE_H"],[1,"\r"],[0,"\n#define"]],"start1":19,"start2":19,"length1":16,"length2":17},{"diffs":[[0,"_TABLE_H"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/******"]],"start1":48,"start2":48,"length1":17,"length2":19},{"diffs":[[0,"********"],[1,"\r"],[0,"\n * UW U"]],"start1":94,"start2":94,"length1":16,"length2":17},{"diffs":[[0,"  jh9cho"],[1,"\r"],[0,"\n * Subm"]],"start1":118,"start2":118,"length1":16,"length2":17},{"diffs":[[0," ECE 250"],[1,"\r"],[0,"\n * Seme"]],"start1":144,"start2":144,"length1":16,"length2":17},{"diffs":[[0,"er) 2013"],[1,"\r"],[0,"\n *"],[1,"\r"],[0,"\n * By s"]],"start1":187,"start2":187,"length1":19,"length2":21},{"diffs":[[0,"irm that"],[1,"\r"],[0,"\n * I am"]],"start1":234,"start2":234,"length1":16,"length2":17},{"diffs":[[0,"tions to"],[1,"\r"],[0,"\n * the "]],"start1":278,"start2":278,"length1":16,"length2":17},{"diffs":[[0,"ed code."],[1,"\r"],[0,"\n ******"]],"start1":301,"start2":301,"length1":16,"length2":17},{"diffs":[[0,"*******/"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#includ"]],"start1":346,"start2":346,"length1":17,"length2":19},{"diffs":[[0,"ption.h\""],[1,"\r"],[0,"\n#includ"]],"start1":372,"start2":372,"length1":16,"length2":17},{"diffs":[[0,"ce250.h\""],[-1,"\n"],[1,"\r\n\r"],[0,"\nenum st"]],"start1":393,"start2":393,"length1":17,"length2":19},{"diffs":[[0,"LETED };"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":437,"start2":437,"length1":17,"length2":19},{"diffs":[[0,"ename T>"],[1,"\r"],[0,"\nclass D"]],"start1":461,"start2":461,"length1":16,"length2":17},{"diffs":[[0,"hTable {"],[1,"\r"],[0,"\n    pri"]],"start1":486,"start2":486,"length1":16,"length2":17},{"diffs":[[0,"ate:"],[-1,"\n"],[1,"\r\n  "],[0,"    "],[-1,"\t"],[1,"  "],[0,"int "]],"start1":504,"start2":504,"length1":14,"length2":18},{"diffs":[[0,"t count;"],[-1,"\n\t"],[1,"\r\n    "],[0,"\tint pow"]],"start1":520,"start2":520,"length1":18,"length2":22},{"diffs":[[0,"t power;"],[1,"\r"],[0,"\n\t\tint a"]],"start1":537,"start2":537,"length1":16,"length2":17},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n\t\tT *ar"]],"start1":556,"start2":556,"length1":16,"length2":17},{"diffs":[[0," *array;"],[1,"\r"],[0,"\n\t\tstate"]],"start1":569,"start2":569,"length1":16,"length2":17},{"diffs":[[0,"ccupied;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tint h"]],"start1":589,"start2":589,"length1":17,"length2":19},{"diffs":[[0,"function"],[1,"\r"],[0,"\n\t\tint h"]],"start1":644,"start2":644,"length1":16,"length2":17},{"diffs":[[0,"function"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\tpublic"]],"start1":698,"start2":698,"length1":17,"length2":19},{"diffs":[[0,"\tpublic:"],[1,"\r"],[0,"\n\t\tDoubl"]],"start1":710,"start2":710,"length1":16,"length2":17},{"diffs":[[0,"t = 5 );"],[1,"\r"],[0,"\n\t\t~Doub"]],"start1":741,"start2":741,"length1":16,"length2":17},{"diffs":[[0,"Table();"],[1,"\r"],[0,"\n\t\tint s"]],"start1":764,"start2":764,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tint c"]],"start1":785,"start2":785,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tdoubl"]],"start1":810,"start2":810,"length1":16,"length2":17},{"diffs":[[0,"_factor() const;"],[1,"\r"],[0,"\n\t\tbool empty() "]],"start1":833,"start2":833,"length1":32,"length2":33},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tbool "]],"start1":864,"start2":864,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tT bin"]],"start1":899,"start2":899,"length1":16,"length2":17},{"diffs":[[0,"in( int ) const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid print() "]],"start1":914,"start2":914,"length1":33,"length2":35},{"diffs":[[0,") const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid "]],"start1":947,"start2":947,"length1":17,"length2":19},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tbool "]],"start1":978,"start2":978,"length1":16,"length2":17},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tvoid "]],"start1":1007,"start2":1007,"length1":16,"length2":17},{"diffs":[[0,"r();"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntem"]],"start1":1028,"start2":1028,"length1":12,"length2":15},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nDoubleHashTable"]],"start1":1045,"start2":1045,"length1":32,"length2":33},{"diffs":[[0,"int m ):"],[1,"\r"],[0,"\ncount( "]],"start1":1101,"start2":1101,"length1":16,"length2":17},{"diffs":[[0,"er( m ),"],[1,"\r"],[0,"\narray_s"]],"start1":1126,"start2":1126,"length1":16,"length2":17},{"diffs":[[0,"power ),"],[1,"\r"],[0,"\narray( "]],"start1":1153,"start2":1153,"length1":16,"length2":17},{"diffs":[[0,"size] ),"],[1,"\r"],[0,"\noccupie"]],"start1":1183,"start2":1183,"length1":16,"length2":17},{"diffs":[[0," {\r\n    "],[1,"\r"],[0,"\n\tfor ( "]],"start1":1226,"start2":1226,"length1":16,"length2":17},{"diffs":[[0," ++i ) {"],[1,"\r"],[0,"\n\t\toccup"]],"start1":1269,"start2":1269,"length1":16,"length2":17},{"diffs":[[0,"= EMPTY;"],[1,"\r"],[0,"\n\t}"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1293,"start2":1293,"length1":22,"length2":26},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nDoubleH"]],"start1":1325,"start2":1325,"length1":16,"length2":17},{"diffs":[[0,"able() {"],[1,"\r"],[0,"\n    \r\n\t"]],"start1":1368,"start2":1368,"length1":16,"length2":17},{"diffs":[[0,"] array;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1416,"start2":1416,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1436,"start2":1436,"length1":32,"length2":33},{"diffs":[[0,"::size() const {"],[1,"\r"],[0,"\n    \r\n\treturn c"]],"start1":1477,"start2":1477,"length1":32,"length2":33},{"diffs":[[0,"n count;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1507,"start2":1507,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1527,"start2":1527,"length1":32,"length2":33},{"diffs":[[0,"pacity() const {"],[1,"\r"],[0,"\n    \r\n\treturn a"]],"start1":1572,"start2":1572,"length1":32,"length2":33},{"diffs":[[0,"turn array_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1599,"start2":1599,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\ndouble "]],"start1":1635,"start2":1635,"length1":16,"length2":17},{"diffs":[[0,"or() const {"],[1,"\r"],[0,"\n    \r\n\tretu"]],"start1":1682,"start2":1682,"length1":24,"length2":25},{"diffs":[[0,"turn"],[-1,"("],[1," "],[0,"(doubl"],[1,"e"],[0,")cou"]],"start1":1705,"start2":1705,"length1":15,"length2":16},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1727,"start2":1727,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":1747,"start2":1747,"length1":32,"length2":33},{"diffs":[[0,":empty() const {"],[1,"\r"],[0,"\n    \r\n    i ( c"]],"start1":1790,"start2":1790,"length1":32,"length2":33},{"diffs":[[0," \r\n    i"],[1,"f"],[0," ("],[-1," "],[0,"count =="]],"start1":1811,"start2":1811,"length1":19,"length2":19},{"diffs":[[0,"\r\n\treturn false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1870,"start2":1870,"length1":35,"length2":38},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1898,"start2":1898,"length1":32,"length2":33},{"diffs":[[0,"bj ) const {"],[1,"\r"],[0,"\n   \r\n   int"]],"start1":1955,"start2":1955,"length1":24,"length2":25},{"diffs":[[0,"h = "],[-1,"(int)"],[1,"static_cast<int>("],[0,"obj"],[1,")"],[0,"&(ar"]],"start1":1981,"start2":1981,"length1":16,"length2":29},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n    }\r\n"]],"start1":2072,"start2":2072,"length1":16,"length2":17},{"diffs":[[0,"ze;\r\n    }\r\n    "],[1,"\r"],[0,"\n\treturn h;\n}\n\nt"]],"start1":2077,"start2":2077,"length1":32,"length2":33},{"diffs":[[0,"    \r\n\treturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":2089,"start2":2089,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nint Dou"]],"start1":2125,"start2":2125,"length1":16,"length2":17},{"diffs":[[0,"bj ) const {"],[1,"\r"],[0,"\n    \r\n    i"]],"start1":2174,"start2":2174,"length1":24,"length2":25},{"diffs":[[0," h ="],[-1,"((int"],[1," static_cast<int>(obj"],[0,"/arr"]],"start1":2201,"start2":2201,"length1":13,"length2":29},{"diffs":[[0," }\r\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":2369,"start2":2369,"length1":16,"length2":17},{"diffs":[[0,"eturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2381,"start2":2381,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":2401,"start2":2401,"length1":32,"length2":33},{"diffs":[[0,"] == obj"],[1," && occupied[probing] == OCCUPIED"],[0,") {\r\n   "]],"start1":2600,"start2":2600,"length1":16,"length2":49},{"diffs":[[0,"Y) {"],[-1,"\n            break;\n        }\n        \n        probing += i*offset;\n    }\n    {"],[0,"\r\n  "]],"start1":2716,"start2":2716,"length1":87,"length2":8},{"diffs":[[0," }\r\n    "],[1,"\r"],[0,"\n"],[-1,"\t"],[0,"\tre"],[1,"t"],[0,"urn fals"]],"start1":2824,"start2":2824,"length1":21,"length2":22},{"diffs":[[0,"n false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2840,"start2":2840,"length1":19,"length2":22},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nT Doubl"]],"start1":2868,"start2":2868,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n\treturn"]],"start1":2913,"start2":2913,"length1":16,"length2":17},{"diffs":[[0,"rray[n];"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2932,"start2":2932,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":2952,"start2":2952,"length1":32,"length2":33},{"diffs":[[0," ) {"],[1,"\r"],[0,"\n\tif "],[-1," "],[1,"("],[0,"coun"]],"start1":3016,"start2":3016,"length1":14,"length2":15},{"diffs":[[0,"w();"],[1,"\r"],[0,"\n\t} "],[-1,"\t\r"],[1,"else"],[0," {\r\n"]],"start1":3073,"start2":3073,"length1":14,"length2":17},{"diffs":[[0,"    "],[-1," i ( m"],[1,"if (me"],[0,"mber"]],"start1":3094,"start2":3094,"length1":14,"length2":14},{"diffs":[[0,"obj)"],[-1,"(occupied[probing] == OCCUPIED"],[0,") {"],[1,"\r"],[0,"\n   "]],"start1":3109,"start2":3109,"length1":41,"length2":12},{"diffs":[[0,"    "],[-1,"probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = obj;\n    occupied[position] = OCCUPIED;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::remove( T const &obj ) {"],[1,"    return;\r"],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"if (!member(obj)) {\n        return false;\n    }\n    \n"],[1,"}\r\n        \r\n    "],[0,"    "]],"start1":3122,"start2":3122,"length1":263,"length2":46},{"diffs":[[0,"h1(obj);"],[-1,"\n"],[1,"\r\n   "],[0,"    "],[1," "],[0,"int offs"]],"start1":3182,"start2":3182,"length1":21,"length2":26},{"diffs":[[0,"bj);"],[1,"\r"],[0,"\n    "],[-1,"\n"],[0,"    "],[-1,"while (array[probing] != obj) {\n        probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = 0;\n   "],[1,"\r\n        for (int i=0; i<array_size; i++)"],[0," {\r\n"]],"start1":3217,"start2":3217,"length1":141,"length2":60},{"diffs":[[0,"probing "],[-1,"= (probing + offset) "],[0,"&"],[1,"="],[0," (array_"]],"start1":3343,"start2":3343,"length1":38,"length2":18},{"diffs":[[0,"        "],[-1,"{\r\n            if ("],[0,"occupied"]],"start1":3486,"start2":3486,"length1":35,"length2":16},{"diffs":[[0,"upied[probing] ="],[-1,"="],[0," OCCUPIED) {\r\n  "]],"start1":3497,"start2":3497,"length1":33,"length2":32},{"diffs":[[0,"bing] = OCCUPIED"],[-1,") {"],[1,";"],[0,"\r\n              "]],"start1":3506,"start2":3506,"length1":35,"length2":33},{"diffs":[[0,"    "],[-1,"        probing = (probing + offset) & (array_size - 1); //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n                break"],[1,"count ++;\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n    \r\n    if (!member(obj)) {\r\n        return false"],[0,";\r\n    "],[-1,"    "],[1,"}\r\n"],[0,"    "],[-1,"}"],[0,"\r\n    "],[-1,"    }\r\n        "],[1,"int probing = h1(obj);\r\n    int offset = h2(obj);"],[0,"\r\n    "],[1,"\r\n"],[0,"    "],[1,"while ("],[0,"arra"]],"start1":3529,"start2":3529,"length1":317,"length2":242},{"diffs":[[0,"(array[probing] "],[1,"!"],[0,"= obj"],[-1,";"],[1,") {"],[0,"\r\n        // ent"]],"start1":3766,"start2":3766,"length1":38,"length2":41},{"diffs":[[0,"    "],[-1,"// enter your implemetation here \t"],[1,"probing = (probing + offset) & (array_size - 1);\r\n    }\r\n    \r\n    array[probing] = 0;"],[0,"\r\n  "]],"start1":3797,"start2":3797,"length1":42,"length2":94},{"diffs":[[0,"TED;"],[-1," //setting flag to deleted\r\n\t\t\t\t"],[1,"\r\n    "],[0,"count"],[1," "],[0,"--;"],[-1," //decrementing counter\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn true; //"],[1,"\r\n    \r\n    "],[0,"retu"]],"start1":3917,"start2":3917,"length1":104,"length2":35},{"diffs":[[0,"true"],[-1,"\r\n\r\n\t}\n}\n"],[1,";\r\n}\r\n\r"],[0,"\ntem"]],"start1":3955,"start2":3955,"length1":17,"length2":15},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":3972,"start2":3972,"length1":32,"length2":33},{"diffs":[[0,"() {"],[-1,"\n\t"],[1,"\r\n   "],[0," for"],[1," "],[0,"(int i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"arra"]],"start1":4021,"start2":4021,"length1":30,"length2":30},{"diffs":[[0,"i++)"],[-1,"\r\n\t {\n\t\t"],[1," {\r\n       "],[0," arr"]],"start1":4059,"start2":4059,"length1":16,"length2":19},{"diffs":[[0,"= 0;"],[-1," //setting everything to zero\r\n\t\t occupied[i] = EMPTY; //setting all the flag to empty\r\n\t }\r\n\t   }\n}\n"],[1,"\r\n        occupied[i] = EMPTY;\r\n    }\r\n    \r\n    count = 0;\r\n}\r\n\r"],[0,"\ntem"]],"start1":4084,"start2":4084,"length1":109,"length2":73},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nvoid Do"]],"start1":4167,"start2":4167,"length1":16,"length2":17},{"diffs":[[0,"st {"],[1,"\r"],[0,"\n    "],[-1,"  for(int i = 0; i < array_size; i++)\r\n\t  {\r\n\t\t  std::cout << array[i] << std::endl;\r\n\t  }\r\n\t"],[1,"// enter your implemetation here \t\r\n    "],[0,"return;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#en"]],"start1":4214,"start2":4214,"length1":116,"length2":67}]],"length":4284,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360954437416,"patch":[[{"diffs":[[0,"_TABLE_H"],[-1,"\r"],[0,"\n#define"]],"start1":19,"start2":19,"length1":17,"length2":16},{"diffs":[[0,"_TABLE_H"],[-1,"\r\n\r"],[1,"\n"],[0,"\n/******"]],"start1":47,"start2":47,"length1":19,"length2":17},{"diffs":[[0,"********"],[-1,"\r"],[0,"\n * UW U"]],"start1":91,"start2":91,"length1":17,"length2":16},{"diffs":[[0,"  jh9cho"],[-1,"\r"],[0,"\n * Subm"]],"start1":114,"start2":114,"length1":17,"length2":16},{"diffs":[[0," ECE 250"],[-1,"\r"],[0,"\n * Seme"]],"start1":139,"start2":139,"length1":17,"length2":16},{"diffs":[[0,"2013"],[-1,"\r"],[0,"\n *"],[-1,"\r"],[0,"\n * "]],"start1":185,"start2":185,"length1":13,"length2":11},{"diffs":[[0,"irm that"],[-1,"\r"],[0,"\n * I am"]],"start1":226,"start2":226,"length1":17,"length2":16},{"diffs":[[0,"tions to"],[-1,"\r"],[0,"\n * the "]],"start1":269,"start2":269,"length1":17,"length2":16},{"diffs":[[0,"ed code."],[-1,"\r"],[0,"\n ******"]],"start1":291,"start2":291,"length1":17,"length2":16},{"diffs":[[0,"*******/"],[-1,"\r\n\r"],[1,"\n"],[0,"\n#includ"]],"start1":335,"start2":335,"length1":19,"length2":17},{"diffs":[[0,"ption.h\""],[-1,"\r"],[0,"\n#includ"]],"start1":359,"start2":359,"length1":17,"length2":16},{"diffs":[[0,"ce250.h\""],[-1,"\r\n\r"],[1,"\n"],[0,"\nenum st"]],"start1":379,"start2":379,"length1":19,"length2":17},{"diffs":[[0,"LETED };"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":421,"start2":421,"length1":19,"length2":17},{"diffs":[[0,"ename T>"],[-1,"\r"],[0,"\nclass D"]],"start1":443,"start2":443,"length1":17,"length2":16},{"diffs":[[0,"hTable {"],[-1,"\r"],[0,"\n    pri"]],"start1":467,"start2":467,"length1":17,"length2":16},{"diffs":[[0,"private:"],[-1,"\r"],[0,"\n       "]],"start1":480,"start2":480,"length1":17,"length2":16},{"diffs":[[0,"t count;"],[-1,"\r\n    "],[1,"\n\t"],[0,"\tint pow"]],"start1":499,"start2":499,"length1":22,"length2":18},{"diffs":[[0,"t power;"],[-1,"\r"],[0,"\n\t\tint a"]],"start1":512,"start2":512,"length1":17,"length2":16},{"diffs":[[0,"ay_size;"],[-1,"\r"],[0,"\n\t\tT *ar"]],"start1":530,"start2":530,"length1":17,"length2":16},{"diffs":[[0," *array;"],[-1,"\r"],[0,"\n\t\tstate"]],"start1":542,"start2":542,"length1":17,"length2":16},{"diffs":[[0,"ccupied;"],[-1,"\r\n\r"],[1,"\n"],[0,"\n\t\tint h"]],"start1":561,"start2":561,"length1":19,"length2":17},{"diffs":[[0,"function"],[-1,"\r"],[0,"\n\t\tint h"]],"start1":614,"start2":614,"length1":17,"length2":16},{"diffs":[[0,"function"],[-1,"\r\n\r"],[1,"\n"],[0,"\n\tpublic"]],"start1":667,"start2":667,"length1":19,"length2":17},{"diffs":[[0,"\tpublic:"],[-1,"\r"],[0,"\n\t\tDoubl"]],"start1":677,"start2":677,"length1":17,"length2":16},{"diffs":[[0,"t = 5 );"],[-1,"\r"],[0,"\n\t\t~Doub"]],"start1":707,"start2":707,"length1":17,"length2":16},{"diffs":[[0,"Table();"],[-1,"\r"],[0,"\n\t\tint s"]],"start1":729,"start2":729,"length1":17,"length2":16},{"diffs":[[0,") const;"],[-1,"\r"],[0,"\n\t\tint c"]],"start1":749,"start2":749,"length1":17,"length2":16},{"diffs":[[0,") const;"],[-1,"\r"],[0,"\n\t\tdoubl"]],"start1":773,"start2":773,"length1":17,"length2":16},{"diffs":[[0,"_factor() const;"],[-1,"\r"],[0,"\n\t\tbool empty() "]],"start1":795,"start2":795,"length1":33,"length2":32},{"diffs":[[0,") const;"],[-1,"\r"],[0,"\n\t\tbool "]],"start1":825,"start2":825,"length1":17,"length2":16},{"diffs":[[0,") const;"],[-1,"\r"],[0,"\n\t\tT bin"]],"start1":859,"start2":859,"length1":17,"length2":16},{"diffs":[[0,"in( int ) const;"],[-1,"\r\n\r"],[1,"\n"],[0,"\n\t\tvoid print() "]],"start1":873,"start2":873,"length1":35,"length2":33},{"diffs":[[0,") const;"],[-1,"\r\n\r"],[1,"\n"],[0,"\n\t\tvoid "]],"start1":904,"start2":904,"length1":19,"length2":17},{"diffs":[[0,"nst & );"],[-1,"\r"],[0,"\n\t\tbool "]],"start1":933,"start2":933,"length1":17,"length2":16},{"diffs":[[0,"nst & );"],[-1,"\r"],[0,"\n\t\tvoid "]],"start1":961,"start2":961,"length1":17,"length2":16},{"diffs":[[0,"r();"],[-1,"\r"],[0,"\n};"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntem"]],"start1":981,"start2":981,"length1":15,"length2":12},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nDoubleHashTable"]],"start1":995,"start2":995,"length1":33,"length2":32},{"diffs":[[0,"int m ):"],[-1,"\r"],[0,"\ncount( "]],"start1":1050,"start2":1050,"length1":17,"length2":16},{"diffs":[[0,"er( m ),"],[-1,"\r"],[0,"\narray_s"]],"start1":1074,"start2":1074,"length1":17,"length2":16},{"diffs":[[0,"power ),"],[-1,"\r"],[0,"\narray( "]],"start1":1100,"start2":1100,"length1":17,"length2":16},{"diffs":[[0,"size] ),"],[-1,"\r"],[0,"\noccupie"]],"start1":1129,"start2":1129,"length1":17,"length2":16},{"diffs":[[0,"ize] ) {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\tfor ( "]],"start1":1165,"start2":1165,"length1":23,"length2":21},{"diffs":[[0," ++i ) {"],[-1,"\r"],[0,"\n\t\toccup"]],"start1":1212,"start2":1212,"length1":17,"length2":16},{"diffs":[[0,"= EMPTY;"],[-1,"\r"],[0,"\n\t}"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":1235,"start2":1235,"length1":26,"length2":22},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\nDoubleH"]],"start1":1263,"start2":1263,"length1":17,"length2":16},{"diffs":[[0,"able() {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[1,"//delete occupied and array array"],[0,"\n\tdelete"]],"start1":1305,"start2":1305,"length1":23,"length2":54},{"diffs":[[0,"ccupied;"],[-1,"\r"],[0,"\n    del"]],"start1":1363,"start2":1363,"length1":17,"length2":16},{"diffs":[[0,"] array;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":1383,"start2":1383,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nint DoubleHashT"]],"start1":1400,"start2":1400,"length1":33,"length2":32},{"diffs":[[0,"::size() const {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[1,"//return count (number of elements in the array)"],[0,"\n\treturn count;\r"]],"start1":1440,"start2":1440,"length1":39,"length2":85},{"diffs":[[0,"n count;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":1516,"start2":1516,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nint DoubleHashT"]],"start1":1533,"start2":1533,"length1":33,"length2":32},{"diffs":[[0,"pacity() const {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[1,"//return array_size (size of the array)"],[0,"\n\treturn array_s"]],"start1":1577,"start2":1577,"length1":39,"length2":76},{"diffs":[[0,"turn array_size;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplate<typena"]],"start1":1641,"start2":1641,"length1":38,"length2":35},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\ndouble "]],"start1":1674,"start2":1674,"length1":17,"length2":16},{"diffs":[[0," const {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\treturn"]],"start1":1724,"start2":1724,"length1":23,"length2":21},{"diffs":[[0,"ay_size;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":1763,"start2":1763,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nbool DoubleHash"]],"start1":1780,"start2":1780,"length1":33,"length2":32},{"diffs":[[0,"ty() const {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    if (cou"]],"start1":1826,"start2":1826,"length1":31,"length2":29},{"diffs":[[0,"f (count == 0) {"],[-1,"\r"],[0,"\n        return "]],"start1":1849,"start2":1849,"length1":33,"length2":32},{"diffs":[[0,"rn true;"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\treturn"]],"start1":1878,"start2":1878,"length1":30,"length2":27},{"diffs":[[0," \n\treturn false;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplate<typena"]],"start1":1896,"start2":1896,"length1":38,"length2":35},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nint DoubleHashT"]],"start1":1921,"start2":1921,"length1":33,"length2":32},{"diffs":[[0," const {"],[-1,"\r"],[0,"\n   "],[-1,"\r"],[0,"\n   int "]],"start1":1981,"start2":1981,"length1":22,"length2":20},{"diffs":[[0,"h = "],[-1,"static_cast<int>("],[1,"(int)"],[0,"obj"],[-1,")"],[0,"&(ar"]],"start1":2001,"start2":2001,"length1":29,"length2":16},{"diffs":[[0,"-1);"],[-1,"\r"],[0,"\n   "],[-1,"\r"],[0,"\n   "]],"start1":2025,"start2":2025,"length1":14,"length2":12},{"diffs":[[0," while (h < 0) {"],[-1,"\r"],[0,"\n        return "]],"start1":2037,"start2":2037,"length1":33,"length2":32},{"diffs":[[0,"ay_size;"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\treturn"]],"start1":2076,"start2":2076,"length1":30,"length2":27},{"diffs":[[0,"\n    \n\treturn h;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplate<typena"]],"start1":2090,"start2":2090,"length1":38,"length2":35},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\nint Dou"]],"start1":2123,"start2":2123,"length1":17,"length2":16},{"diffs":[[0," const {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    int"]],"start1":2175,"start2":2175,"length1":23,"length2":21},{"diffs":[[0,"h = "],[-1,"static_cast<int>"],[1,"(int)"],[0,"(obj"]],"start1":2197,"start2":2197,"length1":24,"length2":13},{"diffs":[[0,"size-1);"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    whi"]],"start1":2230,"start2":2230,"length1":23,"length2":21},{"diffs":[[0,"le (h < 0) {"],[-1,"\r"],[0,"\n        h ="]],"start1":2251,"start2":2251,"length1":25,"length2":24},{"diffs":[[0,"size;   "],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    if "]],"start1":2286,"start2":2286,"length1":30,"length2":27},{"diffs":[[0," == 0) {"],[-1,"\r"],[0,"\n       "]],"start1":2317,"start2":2317,"length1":17,"length2":16},{"diffs":[[0," h += 1;"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\treturn"]],"start1":2333,"start2":2333,"length1":30,"length2":27},{"diffs":[[0,"eturn h;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":2355,"start2":2355,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nbool DoubleHash"]],"start1":2372,"start2":2372,"length1":33,"length2":32},{"diffs":[[0," const {"],[-1,"\r"],[0,"\n\tint pr"]],"start1":2437,"start2":2437,"length1":17,"length2":16},{"diffs":[[0,"obing = h1(obj);"],[-1,"\r"],[0,"\n    int offset "]],"start1":2453,"start2":2453,"length1":33,"length2":32},{"diffs":[[0,"t = h2(obj);"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    for (in"]],"start1":2483,"start2":2483,"length1":31,"length2":29},{"diffs":[[0,"ray_size; i++) {"],[-1,"\r"],[0,"\n        if (arr"]],"start1":2523,"start2":2523,"length1":33,"length2":32},{"diffs":[[0,"] == OCCUPIED) {"],[-1,"\r"],[0,"\n            ret"]],"start1":2593,"start2":2593,"length1":33,"length2":32},{"diffs":[[0,"rn true;"],[-1,"\r"],[0,"\n       "]],"start1":2626,"start2":2626,"length1":17,"length2":16},{"diffs":[[0,"EMPTY) {"],[-1,"\r"],[0,"\n       "]],"start1":2675,"start2":2675,"length1":17,"length2":16},{"diffs":[[0,"          break;"],[-1,"\r"],[0,"\n        }\r\n    "]],"start1":2686,"start2":2686,"length1":33,"length2":32},{"diffs":[[0,"break;\n        }"],[-1,"\r"],[0,"\n        \r\n     "]],"start1":2696,"start2":2696,"length1":33,"length2":32},{"diffs":[[0,"      }\n        "],[-1,"\r"],[0,"\n        probing"]],"start1":2705,"start2":2705,"length1":33,"length2":32},{"diffs":[[0,"ze - 1);"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n\treturn"]],"start1":2770,"start2":2770,"length1":30,"length2":27},{"diffs":[[0,"n false;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":2796,"start2":2796,"length1":22,"length2":19},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\nT Doubl"]],"start1":2821,"start2":2821,"length1":17,"length2":16},{"diffs":[[0," const {"],[-1,"\r"],[0,"\n\treturn"]],"start1":2865,"start2":2865,"length1":17,"length2":16},{"diffs":[[0,"rray[n];"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":2883,"start2":2883,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nvoid DoubleHash"]],"start1":2900,"start2":2900,"length1":33,"length2":32},{"diffs":[[0,"&obj ) {"],[-1,"\r"],[0,"\n\tif (co"]],"start1":2959,"start2":2959,"length1":17,"length2":16},{"diffs":[[0,"_size) {"],[-1,"\r"],[0,"\n       "]],"start1":2987,"start2":2987,"length1":17,"length2":16},{"diffs":[[0,"rflow();"],[-1,"\r"],[0,"\n\t} else"]],"start1":3014,"start2":3014,"length1":17,"length2":16},{"diffs":[[0,"low();\n\t} else {"],[-1,"\r"],[0,"\n        if (mem"]],"start1":3016,"start2":3016,"length1":33,"length2":32},{"diffs":[[0," (member(obj)) {"],[-1,"\r"],[0,"\n            ret"]],"start1":3043,"start2":3043,"length1":33,"length2":32},{"diffs":[[0," return;"],[-1,"\r"],[0,"\n       "]],"start1":3071,"start2":3071,"length1":17,"length2":16},{"diffs":[[0,"eturn;\n        }"],[-1,"\r"],[0,"\n        \r\n     "]],"start1":3073,"start2":3073,"length1":33,"length2":32},{"diffs":[[0,"      }\n        "],[-1,"\r"],[0,"\n        int pro"]],"start1":3082,"start2":3082,"length1":33,"length2":32},{"diffs":[[0,"g = h1(obj);"],[-1,"\r"],[0,"\n        int"]],"start1":3117,"start2":3117,"length1":25,"length2":24},{"diffs":[[0,"t = h2(obj);"],[-1,"\r"],[0,"\n        \r\n "]],"start1":3147,"start2":3147,"length1":25,"length2":24},{"diffs":[[0,"2(obj);\n        "],[-1,"\r"],[0,"\n        for (in"]],"start1":3152,"start2":3152,"length1":33,"length2":32},{"diffs":[[0,"ray_size; i++) {"],[-1,"\r"],[0,"\n            if "]],"start1":3195,"start2":3195,"length1":33,"length2":32},{"diffs":[[0,"UPIED) {"],[-1,"\r"],[1,"\n                probing += offset;"],[0,"\n       "]],"start1":3252,"start2":3252,"length1":17,"length2":51},{"diffs":[[0,"y_size - 1);"],[-1,"\r"],[0,"\n           "]],"start1":3328,"start2":3328,"length1":25,"length2":24},{"diffs":[[0,"} else {"],[-1,"\r"],[0,"\n       "]],"start1":3353,"start2":3353,"length1":17,"length2":16},{"diffs":[[0,"  break;"],[-1,"\r"],[0,"\n       "]],"start1":3376,"start2":3376,"length1":17,"length2":16},{"diffs":[[0,"k;\n            }"],[-1,"\r"],[0,"\n        }\r\n    "]],"start1":3382,"start2":3382,"length1":33,"length2":32},{"diffs":[[0," }\n        }"],[-1,"\r"],[0,"\n        \r\n "]],"start1":3396,"start2":3396,"length1":25,"length2":24},{"diffs":[[0,"  }\n        "],[-1,"\r"],[0,"\n        arr"]],"start1":3405,"start2":3405,"length1":25,"length2":24},{"diffs":[[0,"] = obj;"],[-1,"\r"],[0,"\n       "]],"start1":3439,"start2":3439,"length1":17,"length2":16},{"diffs":[[0,"CCUPIED;"],[-1,"\r"],[0,"\n       "]],"start1":3477,"start2":3477,"length1":17,"length2":16},{"diffs":[[0," ++;"],[-1,"\r"],[0,"\n\t}"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntem"]],"start1":3499,"start2":3499,"length1":18,"length2":14},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\nbool Do"]],"start1":3523,"start2":3523,"length1":17,"length2":16},{"diffs":[[0,"&obj ) {"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    if "]],"start1":3574,"start2":3574,"length1":23,"length2":21},{"diffs":[[0,"(obj)) {"],[-1,"\r"],[0,"\n       "]],"start1":3603,"start2":3603,"length1":17,"length2":16},{"diffs":[[0,"n false;"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    int"]],"start1":3625,"start2":3625,"length1":30,"length2":27},{"diffs":[[0,"g = h1(obj);"],[-1,"\r"],[0,"\n    int off"]],"start1":3659,"start2":3659,"length1":25,"length2":24},{"diffs":[[0,"h2(obj);"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    whi"]],"start1":3689,"start2":3689,"length1":23,"length2":21},{"diffs":[[0,"= obj) {"],[-1,"\r"],[0,"\n       "]],"start1":3730,"start2":3730,"length1":17,"length2":16},{"diffs":[[0,"ze - 1);"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    arr"]],"start1":3787,"start2":3787,"length1":30,"length2":27},{"diffs":[[0,"robing] = 0;"],[-1,"\r"],[0,"\n    occupie"]],"start1":3818,"start2":3818,"length1":25,"length2":24},{"diffs":[[0,"DELETED;"],[-1,"\r"],[0,"\n    cou"]],"start1":3855,"start2":3855,"length1":17,"length2":16},{"diffs":[[0,"ount --;"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n    ret"]],"start1":3869,"start2":3869,"length1":23,"length2":21},{"diffs":[[0,"rn true;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":3891,"start2":3891,"length1":22,"length2":19},{"diffs":[[0,"ate<typename T >"],[-1,"\r"],[0,"\nvoid DoubleHash"]],"start1":3908,"start2":3908,"length1":33,"length2":32},{"diffs":[[0,"lear() {"],[-1,"\r"],[0,"\n    for"]],"start1":3952,"start2":3952,"length1":17,"length2":16},{"diffs":[[0,"; i++) {"],[-1,"\r"],[0,"\n       "]],"start1":3991,"start2":3991,"length1":17,"length2":16},{"diffs":[[0,"[i] = 0;"],[-1,"\r"],[0,"\n       "]],"start1":4013,"start2":4013,"length1":17,"length2":16},{"diffs":[[0,"PTY;"],[-1,"\r"],[0,"\n    }"],[-1,"\r"],[0,"\n    "],[-1,"\r"],[0,"\n   "]],"start1":4046,"start2":4046,"length1":22,"length2":19},{"diffs":[[0,"unt = 0;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\ntemplat"]],"start1":4068,"start2":4068,"length1":22,"length2":19},{"diffs":[[0,"name T >"],[-1,"\r"],[0,"\nvoid Do"]],"start1":4093,"start2":4093,"length1":17,"length2":16},{"diffs":[[0,"st {"],[-1,"\r"],[0,"\n    "],[-1,"// enter your implemetation here \t\r"],[1,"\n    for (int i=0; i<array_size; i++) {\n        std::cout << array[i] << std::endl;\n    } "],[0,"\n   "]],"start1":4139,"start2":4139,"length1":49,"length2":103},{"diffs":[[0,"urn;"],[-1,"\r"],[0,"\n}"],[-1,"\r\n\r"],[1,"\n"],[0,"\n#endif"],[1,"\n"]],"start1":4246,"start2":4246,"length1":17,"length2":15}]],"length":4261,"saved":false}
{"ts":1360954517035,"patch":[[{"diffs":[[0,"const {\n    "],[1,"//returns the load factor"],[0,"\n\treturn (do"]],"start1":1725,"start2":1725,"length1":24,"length2":49},{"diffs":[[0,"const {\n    "],[1,"//returns true if the array does not have any elements inside"],[0,"\n    if (cou"]],"start1":1856,"start2":1856,"length1":24,"length2":85}]],"length":4347,"saved":false}
{"ts":1360954585488,"patch":[[{"diffs":[[0,"st {\n   "],[1,"//calculates the probing"],[0,"\n"],[-1,""],[0,"   int h"]],"start1":2071,"start2":2071,"length1":17,"length2":41},{"diffs":[[0,"const {\n    "],[1,"//calculates offset"],[0,"\n    int h ="]],"start1":2286,"start2":2286,"length1":24,"length2":43},{"diffs":[[0,"te<typename T >\n"],[-1,""],[0,"bool DoubleHashT"]],"start1":2502,"start2":2502,"length1":32,"length2":32},{"diffs":[[0,"const {\n"],[1,"    \n    //returns true if obj is inside the array\n"],[0,"\tint pro"]],"start1":2567,"start2":2567,"length1":16,"length2":67}]],"length":4441,"saved":false}
{"ts":1360954590251,"patch":[[{"diffs":[[0,"ay_size; i++) {\n"],[1,"        //\n"],[0,"        if (arra"]],"start1":2704,"start2":2704,"length1":32,"length2":43}]],"length":4452,"saved":false}
{"ts":1360954702999,"patch":[[{"diffs":[[0,"      //"],[1,"search for the obj with appropriate hash searching (similar to inserting)"],[0,"\n"],[-1,""],[0,"        "]],"start1":2722,"start2":2722,"length1":17,"length2":90},{"diffs":[[0,"const {\n"],[1,"    //returns the element in nth location of the array\n"],[0,"\treturn "]],"start1":3130,"start2":3130,"length1":16,"length2":71},{"diffs":[[0,"obj ) {\n"],[1,"    //inserts obj if there obj is not in the array\n"],[0,"\tif (cou"]],"start1":3279,"start2":3279,"length1":16,"length2":67},{"diffs":[[0," = h2(obj);\n"],[-1,""],[0,"        \n   "]],"start1":3518,"start2":3518,"length1":24,"length2":24},{"diffs":[[0,"(obj);\n        \n"],[1,"        //double hashing technique\n"],[0,"        for (int"]],"start1":3523,"start2":3523,"length1":32,"length2":67}]],"length":4666,"saved":false}
{"ts":1360954813583,"patch":[[{"diffs":[[0,"bj ) {\n    \n"],[1,"    //deletes obj inside the array if it exists\n"],[0,"    if (!mem"]],"start1":3981,"start2":3981,"length1":24,"length2":72},{"diffs":[[0,"!member(obj)) {\n"],[-1,""],[0,"        return f"]],"start1":4049,"start2":4049,"length1":32,"length2":32},{"diffs":[[0,"= h2(obj);\n    \n"],[1,"    //also uses appropriate searching technique to find obj\n"],[0,"    while (array"]],"start1":4140,"start2":4140,"length1":32,"length2":92},{"diffs":[[0,"::clear() {\n"],[1,"    //clears the array reinitialize all the elements in array to 0\n    //also reinitialize all the elements in occupied array to EMPTY \n"],[0,"    for (int"]],"start1":4462,"start2":4462,"length1":24,"length2":160},{"diffs":[[0,"t() const {\n"],[-1,""],[0,"    "],[1,"//prints all the elements in the array"],[0,"\n    for (in"]],"start1":4781,"start2":4781,"length1":28,"length2":66}]],"length":4948,"saved":false}
