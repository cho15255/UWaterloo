{"ts":1360682737548,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360682744285,"patch":[[{"diffs":[[1,"#ifndef DOUBLE_HASH_TABLE_H\r\n#define DOUBLE_HASH_TABLE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Semester of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"Exception.h\"\r\n#include \"ece250.h\"\r\n\r\nenum state { EMPTY, OCCUPIED, DELETED };\r\n\r\ntemplate<typename T>\r\nclass DoubleHashTable {\r\n    private:\r\n\t\tint count;\r\n\t\tint power;\r\n\t\tint array_size;\r\n\t\tT *array;\r\n\t\tstate *occupied;\r\n\r\n\t\tint h1( T const & ) const; // first hash function\r\n\t\tint h2( T const & ) const; // second hash function\r\n\r\n\tpublic:\r\n\t\tDoubleHashTable( int = 5 );\r\n\t\t~DoubleHashTable();\r\n\t\tint size() const;\r\n\t\tint capacity() const;\r\n\t\tdouble load_factor() const;\r\n\t\tbool empty() const;\r\n\t\tbool member( T const & ) const;\r\n\t\tT bin( int ) const;\r\n\r\n\t\tvoid print() const;\r\n\r\n\t\tvoid insert( T const & );\r\n\t\tbool remove( T const & );\r\n\t\tvoid clear();\r\n};\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::DoubleHashTable( int m ):\r\ncount( 0 ), power( m ),\r\narray_size( 1 << power ),\r\narray( new T [array_size] ),\r\noccupied( new state[array_size] ) {\r\n\r\n\tfor ( int i = 0; i < array_size; ++i ) {\r\n\t\toccupied[i] = EMPTY;\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::~DoubleHashTable() {\r\n\t// enter your implemetation here \r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::size() const {\r\n    // enter your implemetation here \r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::capacity() const {\r\n    // enter your implemetation here \r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\ndouble DoubleHashTable<T >::load_factor() const {\r\n    // enter your implemetation here \r\n\treturn 0.00;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::empty() const {\r\n    // enter your implemetation here \r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h1( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h2( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::member( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\t\r\n\r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nT DoubleHashTable<T >::bin( int n ) const {\r\n    // enter your implemetation here \t      \r\n                    \r\n\treturn T();\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::insert( T const &obj ) {\r\n\t // enter your implemetation here \t\r\n\t return ; \r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n\t // enter your implemetation here \t\r\n\r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::clear() {\r\n\t // enter your implemetation here \t\r\n\t return ; \r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::print() const {\r\n      // enter your implemetation here \t\r\n\treturn;\r\n}\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2997}]],"length":2997,"saved":false}
