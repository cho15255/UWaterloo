{"ts":1360682737548,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360682744285,"patch":[[{"diffs":[[1,"#ifndef DOUBLE_HASH_TABLE_H\r\n#define DOUBLE_HASH_TABLE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Semester of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"Exception.h\"\r\n#include \"ece250.h\"\r\n\r\nenum state { EMPTY, OCCUPIED, DELETED };\r\n\r\ntemplate<typename T>\r\nclass DoubleHashTable {\r\n    private:\r\n\t\tint count;\r\n\t\tint power;\r\n\t\tint array_size;\r\n\t\tT *array;\r\n\t\tstate *occupied;\r\n\r\n\t\tint h1( T const & ) const; // first hash function\r\n\t\tint h2( T const & ) const; // second hash function\r\n\r\n\tpublic:\r\n\t\tDoubleHashTable( int = 5 );\r\n\t\t~DoubleHashTable();\r\n\t\tint size() const;\r\n\t\tint capacity() const;\r\n\t\tdouble load_factor() const;\r\n\t\tbool empty() const;\r\n\t\tbool member( T const & ) const;\r\n\t\tT bin( int ) const;\r\n\r\n\t\tvoid print() const;\r\n\r\n\t\tvoid insert( T const & );\r\n\t\tbool remove( T const & );\r\n\t\tvoid clear();\r\n};\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::DoubleHashTable( int m ):\r\ncount( 0 ), power( m ),\r\narray_size( 1 << power ),\r\narray( new T [array_size] ),\r\noccupied( new state[array_size] ) {\r\n\r\n\tfor ( int i = 0; i < array_size; ++i ) {\r\n\t\toccupied[i] = EMPTY;\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::~DoubleHashTable() {\r\n\t// enter your implemetation here \r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::size() const {\r\n    // enter your implemetation here \r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::capacity() const {\r\n    // enter your implemetation here \r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\ndouble DoubleHashTable<T >::load_factor() const {\r\n    // enter your implemetation here \r\n\treturn 0.00;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::empty() const {\r\n    // enter your implemetation here \r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h1( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h2( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\treturn 0;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::member( T const &obj ) const {\r\n\t// enter your implemetation here \r\n\r\n\t\r\n\r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nT DoubleHashTable<T >::bin( int n ) const {\r\n    // enter your implemetation here \t      \r\n                    \r\n\treturn T();\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::insert( T const &obj ) {\r\n\t // enter your implemetation here \t\r\n\t return ; \r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n\t // enter your implemetation here \t\r\n\r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::clear() {\r\n\t // enter your implemetation here \t\r\n\t return ; \r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::print() const {\r\n      // enter your implemetation here \t\r\n\treturn;\r\n}\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2997}]],"length":2997,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360683333838,"patch":[[{"diffs":[[0,"e] ) {\r\n"],[1,"    "],[0,"\r\n\tfor ("]],"start1":1227,"start2":1227,"length1":16,"length2":20}]],"length":3001,"saved":false}
{"ts":1360683504455,"patch":[[{"diffs":[[0,"{\r\n\t"],[-1,"// enter your implemetation here "],[1,"delete [] occupied;"],[0,"\r\n}\r"]],"start1":1380,"start2":1380,"length1":41,"length2":27}]],"length":2987,"saved":false}
{"ts":1360683509287,"patch":[[{"diffs":[[0,"upied;\r\n"],[1,"    delete \r\n"],[0,"}\r\n\r\ntem"]],"start1":1397,"start2":1397,"length1":16,"length2":29}]],"length":3000,"saved":false}
{"ts":1360683520596,"patch":[[{"diffs":[[0," delete "],[1,"[] array;"],[0,"\r\n}\r\n\r\nt"]],"start1":1408,"start2":1408,"length1":16,"length2":25}]],"length":3009,"saved":false}
{"ts":1360683543244,"patch":[[{"diffs":[[0,"    "],[-1,"// enter your implemetation here "],[0,"\r\n\tr"]],"start1":1496,"start2":1496,"length1":41,"length2":8}]],"length":2976,"saved":false}
{"ts":1360683625568,"patch":[[{"diffs":[[0," {\r\n"],[-1,"    \r\n"],[0,"\treturn "],[-1,"0"],[1,"array_size"],[0,";\r\n}"]],"start1":1492,"start2":1492,"length1":23,"length2":26}]],"length":2979,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360683783437,"patch":[[{"diffs":[[0,"\treturn "],[-1,"array_size"],[1,"count"],[0,";\r\n}\r\n\r\n"]],"start1":1496,"start2":1496,"length1":26,"length2":21},{"diffs":[[0," {\r\n"],[-1,"    // enter your implemetation here \r\n\treturn 0"],[1,"\treturn array_size"],[0,";\r\n}"]],"start1":1581,"start2":1581,"length1":56,"length2":26}]],"length":2944,"saved":false}
{"ts":1360683844392,"patch":[[{"diffs":[[0," {\r\n"],[-1,"    // enter your implemetation here \r\n\treturn 0.00"],[1,"\treturn load_factor"],[0,";\r\n}"]],"start1":1681,"start2":1681,"length1":59,"length2":27}]],"length":2912,"saved":false}
{"ts":1360683881235,"patch":[[{"diffs":[[0,"    "],[-1,"// enter your implemetation here "],[1,"if (count == 0)"],[0,"\r\n\tr"]],"start1":1778,"start2":1778,"length1":41,"length2":23}]],"length":2894,"saved":false}
{"ts":1360683887246,"patch":[[{"diffs":[[0,"nt == 0)"],[1," {\r\n        return true;\r\n    }"],[0,"\r\n\tretur"]],"start1":1789,"start2":1789,"length1":16,"length2":47}]],"length":2925,"saved":false}
{"ts":1360683912425,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\t// enter your implemetation here \r\n"],[1,"    "],[0,"\r\n\tr"]],"start1":1923,"start2":1923,"length1":44,"length2":12}]],"length":2893,"saved":false}
{"ts":1360684004576,"patch":[[{"diffs":[[0,"onst {\r\n"],[-1,"    \r\n"],[0,"\treturn "]],"start1":1919,"start2":1919,"length1":22,"length2":16},{"diffs":[[0,"{\r\n\t"],[-1,"// enter your implemetation here \r\n\r\n\t\r\n"],[1,"for (int i=0; i<array_size; i++) {\r\n        if (array[i] == &obj) {\r\n            return true;\r\n        }\r\n    }"],[0,"\r\n\tr"]],"start1":2153,"start2":2153,"length1":48,"length2":119}]],"length":2958,"saved":false}
{"ts":1360684054522,"patch":[[{"diffs":[[0,"    "],[-1,"// enter your implemetation here \t      \r\n                    "],[0,"\r\n\tr"]],"start1":2359,"start2":2359,"length1":70,"length2":8}]],"length":2896,"saved":false}
{"ts":1360684119567,"patch":[[{"diffs":[[0," {\r\n"],[-1,"    \r\n"],[0,"\treturn "],[-1,"T()"],[1,"array[n]"],[0,";\r\n}"]],"start1":2355,"start2":2355,"length1":25,"length2":24}]],"length":2895,"saved":false}
{"ts":1360684432508,"patch":[[{"diffs":[[0,"&obj ) const {\r\n"],[1,"    int a = 0;\r\n    \r\n    \r\n"],[0,"\treturn 0;\r\n}\r\n\r"]],"start1":1911,"start2":1911,"length1":32,"length2":60}]],"length":2923,"saved":false}
{"ts":1360684440621,"patch":[[{"diffs":[[0,"    "],[-1,"int a = 0;"],[0,"\r\n  "]],"start1":1927,"start2":1927,"length1":18,"length2":8}]],"length":2913,"saved":false}
{"ts":1360684846761,"patch":[[{"diffs":[[0,"    \r\n    \r\n"],[1,"    &obj%array_size\r\n"],[0,"    \r\n\tretur"]],"start1":1927,"start2":1927,"length1":24,"length2":45},{"diffs":[[0,"\r\n    \r\n\treturn "],[-1,"0"],[0,";\r\n}\r\n\r\ntemplate"]],"start1":1958,"start2":1958,"length1":33,"length2":32}]],"length":2933,"saved":false}
{"ts":1360684986471,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"    \r\n    "],[1,"\treturn ("],[0,"&obj"],[-1,"%"],[1,")&("],[0,"arra"]],"start1":1929,"start2":1929,"length1":23,"length2":24},{"diffs":[[0,"ray_size"],[-1,"\r\n    \r\n\treturn "],[1,"-1)"],[0,";\r\n}\r\n\r\n"]],"start1":1951,"start2":1951,"length1":32,"length2":19}]],"length":2921,"saved":false}
{"ts":1360684990050,"patch":[[{"diffs":[[0,"onst {\r\n"],[-1,"    \r\n"],[0,"\treturn "]],"start1":1919,"start2":1919,"length1":22,"length2":16}]],"length":2915,"saved":false}
{"ts":1360685041840,"patch":[[{"diffs":[[0,"&obj ) const {\r\n"],[1,"    \r\n    if ((&obj)&(array_size-1) < 0) {\r\n        return (&obj)&(array_size-1) + array_size;\r\n    }\r\n    \r\n"],[0,"\treturn (&obj)&("]],"start1":1911,"start2":1911,"length1":32,"length2":141}]],"length":3024,"saved":false}
{"ts":1360685065703,"patch":[[{"diffs":[[0,"+i ) {\r\n"],[1,"        \r\n"],[0,"\t\toccupi"]],"start1":1276,"start2":1276,"length1":16,"length2":26},{"diffs":[[0,"le() {\r\n"],[1,"    \r\n"],[0,"\tdelete "]],"start1":1385,"start2":1385,"length1":16,"length2":22},{"diffs":[[0,"size() const {\r\n"],[1,"    \r\n"],[0,"\treturn count;\r\n"]],"start1":1496,"start2":1496,"length1":32,"length2":38},{"diffs":[[0,"city() const {\r\n"],[1,"    \r\n"],[0,"\treturn array_si"]],"start1":1591,"start2":1591,"length1":32,"length2":38},{"diffs":[[0,"ctor() const {\r\n"],[1,"    \r\n"],[0,"\treturn load_fac"]],"start1":1697,"start2":1697,"length1":32,"length2":38},{"diffs":[[0,"e<typename T >\r\n"],[-1,""],[0,"bool DoubleHashT"]],"start1":1753,"start2":1753,"length1":32,"length2":32},{"diffs":[[0,"() const {\r\n"],[1,"    \r\n"],[0,"    if (coun"]],"start1":1800,"start2":1800,"length1":24,"length2":30}]],"length":3064,"saved":false}
{"ts":1360685072619,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        \r\n"],[0,"\t\toc"]],"start1":1280,"start2":1280,"length1":18,"length2":8}]],"length":3054,"saved":false}
{"ts":1360685077513,"patch":[[{"diffs":[[0,"n true;\r\n    }\r\n"],[1,"    \r\n"],[0,"\treturn false;\r\n"]],"start1":1844,"start2":1844,"length1":32,"length2":38}]],"length":3060,"saved":false}
{"ts":1360685152436,"patch":[[{"diffs":[[0,"{\r\n\t"],[-1,"// enter your implemetation here \r\n"],[1,"if ((&obj/array_size)&(array_size-1) < 0) {\r\n        return (&obj/array_size)&(array_size-1) + array_size;   \r\n\t}\r\n    "],[0,"\r\n\tr"]],"start1":2182,"start2":2182,"length1":43,"length2":127}]],"length":3144,"saved":false}
{"ts":1360685157033,"patch":[[{"diffs":[[0,"\treturn "],[-1,"0"],[1,"(&obj/array_size)&(array_size-1)"],[0,";\r\n}\r\n\r\n"]],"start1":2307,"start2":2307,"length1":17,"length2":48}]],"length":3175,"saved":false}
{"ts":1360685161600,"patch":[[{"diffs":[[0,"onst {\r\n"],[1,"    \r\n"],[0,"\tif ((&o"]],"start1":2177,"start2":2177,"length1":16,"length2":22}]],"length":3181,"saved":false}
{"ts":1360685237961,"patch":[[{"diffs":[[0,"\r\n\t "],[-1,"// enter your implemetation here \t"],[1,"if (count == array_size) {\r\n         throw overflow;\r\n\t }\r\n     "],[0,"\r\n\t "]],"start1":2742,"start2":2742,"length1":42,"length2":72}]],"length":3211,"saved":false}
{"ts":1360685239476,"patch":[[{"diffs":[[0,"overflow"],[1,"()"],[0,";\r\n\t }\r\n"]],"start1":2789,"start2":2789,"length1":16,"length2":18}]],"length":3213,"saved":false}
{"ts":1360685256765,"patch":[[{"diffs":[[0,"\n     \r\n"],[1,"     \r\n     \r\n"],[0,"\t return"]],"start1":2806,"start2":2806,"length1":16,"length2":30}]],"length":3227,"saved":false}
{"ts":1360685270643,"patch":[[{"diffs":[[0,"j ) {\r\n\t"],[-1," "],[0,"if (coun"]],"start1":2737,"start2":2737,"length1":17,"length2":16},{"diffs":[[0,";\r\n\t"],[-1," "],[0,"}\r\n    "],[-1," "],[0,"\r\n    "],[-1," \r\n     "],[0,"\r\n\t "]],"start1":2798,"start2":2798,"length1":31,"length2":21}]],"length":3216,"saved":false}
{"ts":1360685291400,"patch":[[{"diffs":[[0,"t &obj ) {\r\n"],[-1,"\t"],[1,"   "],[0," // enter yo"]],"start1":2898,"start2":2898,"length1":25,"length2":27},{"diffs":[[0,"re \t\r\n\r\n"],[-1,"\t"],[1,"    "],[0,"return f"]],"start1":2944,"start2":2944,"length1":17,"length2":20},{"diffs":[[0,"ar() {\r\n"],[-1,"\t"],[1,"   "],[0," // ente"]],"start1":3028,"start2":3028,"length1":17,"length2":19},{"diffs":[[0,"here \t\r\n"],[-1,"\t"],[1,"   "],[0," return "]],"start1":3068,"start2":3068,"length1":17,"length2":19},{"diffs":[[0," {\r\n    "],[-1,"  "],[0,"// enter"]],"start1":3158,"start2":3158,"length1":18,"length2":16},{"diffs":[[0,"here \t\r\n"],[-1,"\t"],[1,"    "],[0,"return;\r"]],"start1":3194,"start2":3194,"length1":17,"length2":20}]],"length":3226,"saved":false}
{"ts":1360685325990,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"    \r\n"],[0,"\t return"]],"start1":2809,"start2":2809,"length1":16,"length2":22}]],"length":3232,"saved":false}
{"ts":1360685667681,"patch":[[{"diffs":[[0,"\r\n    \r\n    "],[1,"int firstHash = h1(&obj);\r\n    int secondHash = h2(&obj);"],[0,"\r\n    \r\n\t re"]],"start1":2803,"start2":2803,"length1":24,"length2":81}]],"length":3289,"saved":false}
{"ts":1360685771018,"patch":[[{"diffs":[[0,"   if (("],[-1,"&"],[0,"obj)&(ar"]],"start1":1970,"start2":1970,"length1":17,"length2":16},{"diffs":[[0,"        return ("],[-1,"&"],[0,"obj)&(array_size"]],"start1":2006,"start2":2006,"length1":33,"length2":32},{"diffs":[[0,"return ("],[-1,"&"],[0,"obj)&(ar"]],"start1":2071,"start2":2071,"length1":17,"length2":16},{"diffs":[[0,"\r\n\tif (("],[-1,"&"],[0,"obj/arra"]],"start1":2186,"start2":2186,"length1":17,"length2":16},{"diffs":[[0,"        return ("],[-1,"&"],[0,"obj/array_size)&"]],"start1":2233,"start2":2233,"length1":33,"length2":32},{"diffs":[[0,"return ("],[-1,"&"],[0,"obj/arra"]],"start1":2309,"start2":2309,"length1":17,"length2":16},{"diffs":[[0,"y[i] == "],[-1,"&"],[0,""],[1,""],[0,"obj) {\r\n"]],"start1":2489,"start2":2489,"length1":17,"length2":16},{"diffs":[[0,"sh = h1("],[-1,"&"],[0,"obj);\r\n "]],"start1":2819,"start2":2819,"length1":17,"length2":16},{"diffs":[[0,"sh = h2("],[-1,"&"],[0,"obj);\r\n "]],"start1":2850,"start2":2850,"length1":17,"length2":16}]],"length":3280,"saved":false}
{"ts":1360685842165,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"    if (occupied[firstHash] )\r\n    \r\n"],[0,"\t return"]],"start1":2863,"start2":2863,"length1":16,"length2":53}]],"length":3317,"saved":false}
{"ts":1360685873983,"patch":[[{"diffs":[[0,"stHash] "],[1,"== OCCUPIED"],[0,")\r\n    \r"]],"start1":2891,"start2":2891,"length1":16,"length2":27}]],"length":3328,"saved":false}
{"ts":1360685878082,"patch":[[{"diffs":[[0,"CCUPIED)"],[1," {\r\n        \r\n    }"],[0,"\r\n    \r\n"]],"start1":2903,"start2":2903,"length1":16,"length2":35}]],"length":3347,"saved":false}
{"ts":1360685897098,"patch":[[{"diffs":[[0,"  \r\n    "],[-1,"if"],[1,"while"],[0," (occupi"]],"start1":2867,"start2":2867,"length1":18,"length2":21}]],"length":3350,"saved":false}
{"ts":1360685931877,"patch":[[{"diffs":[[0,"    int "],[-1,"firstHash"],[1,"probing"],[0," = h1(ob"]],"start1":2804,"start2":2804,"length1":25,"length2":23},{"diffs":[[0,"int "],[-1,"secondHash"],[1,"offset"],[0," = h"]],"start1":2836,"start2":2836,"length1":18,"length2":14}]],"length":3344,"saved":false}
{"ts":1360685971420,"patch":[[{"diffs":[[0,"ied["],[-1,"firstHash"],[1,"probing"],[0,"] =="]],"start1":2881,"start2":2881,"length1":17,"length2":15},{"diffs":[[0," {\r\n        "],[1,"probing = (probing+offset) & (array_size-1)"],[0,"\r\n    }\r\n   "]],"start1":2906,"start2":2906,"length1":24,"length2":67}]],"length":3385,"saved":false}
{"ts":1360685973667,"patch":[[{"diffs":[[0,"_size-1)"],[1,";"],[0,"\r\n    }\r"]],"start1":2953,"start2":2953,"length1":16,"length2":17}]],"length":3386,"saved":false}
{"ts":1360686007123,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"\t return ;"],[1,"   "],[0," \r\n}"]],"start1":2973,"start2":2973,"length1":18,"length2":11}]],"length":3379,"saved":false}
{"ts":1360686041282,"patch":[[{"diffs":[[0,"  \r\n    "],[1,"array[probing] = obj;\r\n    occupied[probing] = OCCUPIED;"],[0,"\r\n}\r\n\r\nt"]],"start1":2973,"start2":2973,"length1":16,"length2":72}]],"length":3435,"saved":false}
{"ts":1360686132732,"patch":[[{"diffs":[[0,"    "],[-1,"// enter your implemetation here \t\r\n    return ; "],[1,"for (int i=0; i<array_size; i++) {\r\n        array[i] = 0;\r\n    }"],[0,"\r\n}\r"]],"start1":3245,"start2":3245,"length1":57,"length2":72}]],"length":3450,"saved":false}
{"ts":1360686141626,"patch":[[{"diffs":[[0,"] = 0;\r\n"],[1,"        occupied[i] = EMPTY;\r\n"],[0,"    }\r\n}"]],"start1":3300,"start2":3300,"length1":16,"length2":46}]],"length":3480,"saved":false}
