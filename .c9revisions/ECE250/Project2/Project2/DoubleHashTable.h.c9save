{"ts":1360849120308,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#ifndef DOUBLE_HASH_TABLE_H\r\n#define DOUBLE_HASH_TABLE_H\r\n\r\n/*****************************************\r\n * UW User ID:  uwuserid\r\n * Submitted for ECE 250\r\n * Semester of Submission:  (Winter|Spring|Fall) 20NN\r\n *\r\n * By submitting this file, I affirm that\r\n * I am the author of all modifications to\r\n * the provided code.\r\n *****************************************/\r\n\r\n#include \"Exception.h\"\r\n#include \"ece250.h\"\r\n\r\nenum state { EMPTY, OCCUPIED, DELETED };\r\n\r\ntemplate<typename T>\r\nclass DoubleHashTable {\r\n    private:\r\n\t\tint count;\r\n\t\tint power;\r\n\t\tint array_size;\r\n\t\tT *array;\r\n\t\tstate *occupied;\r\n\r\n\t\tint h1( T const & ) const; // first hash function\r\n\t\tint h2( T const & ) const; // second hash function\r\n\r\n\tpublic:\r\n\t\tDoubleHashTable( int = 5 );\r\n\t\t~DoubleHashTable();\r\n\t\tint size() const;\r\n\t\tint capacity() const;\r\n\t\tdouble load_factor() const;\r\n\t\tbool empty() const;\r\n\t\tbool member( T const & ) const;\r\n\t\tT bin( int ) const;\r\n\r\n\t\tvoid print() const;\r\n\r\n\t\tvoid insert( T const & );\r\n\t\tbool remove( T const & );\r\n\t\tvoid clear();\r\n};\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::DoubleHashTable( int m ):\r\ncount( 0 ), power( m ),\r\narray_size( 1 << power ),\r\narray( new T [array_size] ),\r\noccupied( new state[array_size] ) {\r\n    \r\n\tfor ( int i = 0; i < array_size; ++i ) {\r\n\t\toccupied[i] = EMPTY;\r\n\t}\r\n}\r\n\r\ntemplate<typename T >\r\nDoubleHashTable<T >::~DoubleHashTable() {\r\n    \r\n\tdelete [] occupied;\r\n    delete [] array;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::size() const {\r\n    \r\n\treturn count;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::capacity() const {\r\n    \r\n\treturn array_size;\r\n}\r\n\r\ntemplate<typename T >\r\ndouble DoubleHashTable<T >::load_factor() const {\r\n    \r\n\treturn load_factor;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::empty() const {\r\n    \r\n    if (count == 0) {\r\n        return true;\r\n    }\r\n    \r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h1( T const &obj ) const {\r\n    \r\n    if ((obj)&(array_size-1) < 0) {\r\n        return (obj)&(array_size-1) + array_size;\r\n    }\r\n    \r\n\treturn (obj)&(array_size-1);\r\n}\r\n\r\ntemplate<typename T >\r\nint DoubleHashTable<T >::h2( T const &obj ) const {\r\n    \r\n\tif ((obj/array_size)&(array_size-1) < 0) {\r\n        return (obj/array_size)&(array_size-1) + array_size;   \r\n\t}\r\n    \r\n\treturn (obj/array_size)&(array_size-1);\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::member( T const &obj ) const {\r\n\tfor (int i=0; i<array_size; i++) {\r\n        if (array[i] == obj) {\r\n            return true;\r\n        }\r\n    }\r\n\treturn false;\r\n}\r\n\r\ntemplate<typename T >\r\nT DoubleHashTable<T >::bin( int n ) const {\r\n\treturn array[n];\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::insert( T const &obj ) {\r\n\tif (count == array_size) {\r\n         throw overflow();\r\n\t}\r\n    \r\n    int probing = h1(obj);\r\n    int offset = h2(obj);\r\n    \r\n    while (occupied[probing] == OCCUPIED) {\r\n        probing = (probing+offset) & (array_size-1);\r\n    }\r\n    \r\n    array[probing] = obj;\r\n    occupied[probing] = OCCUPIED;\r\n}\r\n\r\ntemplate<typename T >\r\nbool DoubleHashTable<T >::remove( T const &obj ) {\r\n    // enter your implemetation here \t\r\n\r\n    return false;\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::clear() {\r\n    for (int i=0; i<array_size; i++) {\r\n        array[i] = 0;\r\n        occupied[i] = EMPTY;\r\n    }\r\n}\r\n\r\ntemplate<typename T >\r\nvoid DoubleHashTable<T >::print() const {\r\n    // enter your implemetation here \t\r\n    return;\r\n}\r\n\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":3480}]],"length":3480}
{"contributors":[],"silentsave":false,"ts":1360849776285,"patch":[[{"diffs":[[0,"OCCUPIED"],[1," || occupied[probing] == DELETED"],[0,") {\r\n   "]],"start1":2897,"start2":2897,"length1":16,"length2":48}]],"length":3512,"saved":false}
{"ts":1360849781510,"patch":[[{"diffs":[[0,"    "],[-1,"// enter your implemetation here \t"],[0,"\r\n\r\n"]],"start1":3151,"start2":3151,"length1":42,"length2":8}]],"length":3478,"saved":false}
{"ts":1360849947944,"patch":[[{"diffs":[[0,"{\r\n    \r"],[1,"\n    int probing = h1(obj);\r\n    int offset = h2(obj);\r"],[0,"\n\r\n    r"]],"start1":3148,"start2":3148,"length1":16,"length2":71}]],"length":3533,"saved":false}
{"ts":1360849980161,"patch":[[{"diffs":[[0,"2(obj);\r"],[1,"\n    \r\n    while (array[probing] != )\r"],[0,"\n\r\n    r"]],"start1":3203,"start2":3203,"length1":16,"length2":54}]],"length":3571,"saved":false}
{"ts":1360849984206,"patch":[[{"diffs":[[0,"ing] != "],[1,"obj"],[0,")\r\n\r\n   "]],"start1":3239,"start2":3239,"length1":16,"length2":19}]],"length":3574,"saved":false}
{"ts":1360849986410,"patch":[[{"diffs":[[0," != obj)"],[1," {\r\n        \r\n    }"],[0,"\r\n\r\n    "]],"start1":3243,"start2":3243,"length1":16,"length2":35}]],"length":3593,"saved":false}
{"ts":1360850056630,"patch":[[{"diffs":[[0," {\r\n        "],[1,"probing = (probing+offset)"],[0,"\r\n    }\r\n\r\n "]],"start1":3251,"start2":3251,"length1":24,"length2":50}]],"length":3619,"saved":false}
{"ts":1360850063826,"patch":[[{"diffs":[[0,"+offset)"],[1," & (array_size-1);"],[0,"\r\n    }\r"]],"start1":3281,"start2":3281,"length1":16,"length2":34}]],"length":3637,"saved":false}
{"ts":1360850410151,"patch":[[{"diffs":[[0,"\r\n    \r\n"],[1,"    int number = obj/array_size\r\n    \r\n"],[0,"\tif ((ob"]],"start1":2180,"start2":2180,"length1":16,"length2":55}]],"length":3676,"saved":false}
{"ts":1360850460289,"patch":[[{"diffs":[[0,"int "],[-1,"number"],[1,"h"],[0," = "],[1,"("],[0,"obj/"]],"start1":2192,"start2":2192,"length1":17,"length2":13},{"diffs":[[0,"ray_size"],[1,")&(array_size-1);\r\n    if (h%2 == 0) {\r\n        h += 1;\r\n    }"],[0,"\r\n    \r\n"]],"start1":2207,"start2":2207,"length1":16,"length2":78}]],"length":3734,"saved":false}
{"ts":1360850484966,"patch":[[{"diffs":[[0,"if ("],[-1,"(obj/array_size)&(array_size-1) < 0) {\r\n        return (obj/array_size)&(array_size-1)"],[1,"h < 0) {\r\n        return h"],[0," + a"]],"start1":2286,"start2":2286,"length1":94,"length2":34},{"diffs":[[0,"urn "],[-1,"(obj/array_size)&(array_size-1)"],[1,"h"],[0,";\r\n}"]],"start1":2349,"start2":2349,"length1":39,"length2":9}]],"length":3644,"saved":false}
{"ts":1360850498900,"patch":[[{"diffs":[[0,"j ) const {\r\n   "],[1,"\r\n   int = (obj)&(array_size-1)\r\n  "],[0," \r\n    if ((obj)"]],"start1":1950,"start2":1950,"length1":32,"length2":67}]],"length":3679,"saved":false}
{"ts":1360850507709,"patch":[[{"diffs":[[0,"\n   int "],[1,"h "],[0,"= (obj)&"]],"start1":1967,"start2":1967,"length1":16,"length2":18},{"diffs":[[0,"_size-1)"],[1,";"],[0,"\r\n   \r\n "]],"start1":1991,"start2":1991,"length1":16,"length2":17}]],"length":3682,"saved":false}
{"ts":1360850520957,"patch":[[{"diffs":[[0,"    if ("],[-1,"(obj)&(array_size-1)"],[1,"h"],[0," < 0) {\r"]],"start1":2007,"start2":2007,"length1":36,"length2":17},{"diffs":[[0," return "],[-1,"(obj)&(array_size-1)"],[1,"h"],[0," + array"]],"start1":2032,"start2":2032,"length1":36,"length2":17},{"diffs":[[0,"\treturn "],[-1,"(obj)&(array_size-1)"],[1,"h"],[0,";\r\n}\r\n\r\n"]],"start1":2070,"start2":2070,"length1":36,"length2":17}]],"length":3625,"saved":false}
{"ts":1360850715829,"patch":[[{"diffs":[[0,"bing] != obj"],[1," && occupied[probing] == OCCUPIED"],[0,") {\r\n       "]],"start1":3226,"start2":3226,"length1":24,"length2":57}]],"length":3658,"saved":false}
{"ts":1360850774201,"patch":[[{"diffs":[[0,"\r\n    }\r"],[1,"\n    \r\n    if (array[probing] == obj) {\r\n        return true;\r\n    }\r"],[0,"\n\r\n    r"]],"start1":3328,"start2":3328,"length1":16,"length2":85}]],"length":3727,"saved":false}
{"ts":1360851169030,"patch":[[{"diffs":[[0,"set = h2(obj);\r\n"],[1,"    int counter = 0;\r\n"],[0,"    \r\n    while "]],"start1":3184,"start2":3184,"length1":32,"length2":54}]],"length":3749,"saved":false}
{"ts":1360851189606,"patch":[[{"diffs":[[0,"OCCUPIED"],[1," && counter < array_size"],[0,") {\r\n   "]],"start1":3285,"start2":3285,"length1":16,"length2":40}]],"length":3773,"saved":false}
{"ts":1360851235116,"patch":[[{"diffs":[[0,"f (h"],[-1,"%2"],[1,"&1"],[0," == "]],"start1":2220,"start2":2220,"length1":10,"length2":10}]],"length":3773,"saved":false}
