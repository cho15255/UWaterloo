{"ts":1360683049987,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360683053559,"patch":[[{"diffs":[[1,"/*************************************************\r\n * Double_hash_table_tester\r\n * A class for testing double hash tables.\r\n *\r\n * Author:  Douglas Wilhelm Harder\r\n * Copyright (c) 2007 by Douglas Wilhelm Harder.  All rights reserved.\r\n *\r\n * DO NOT EDIT THIS FILE\r\n *************************************************/\r\n\r\n#ifndef DOUBLE_HASH_TABLE_TESTER_H\r\n#define DOUBLE_HASH_TABLE_TESTER_H\r\n#define PARAMETERIZED\r\n\r\n#include \"Exception.h\"\r\n#include \"Tester.h\"\r\n#include \"DoubleHashTable.h\"\r\n\r\n#include <iostream>\r\n\r\n\r\ntemplate <typename Type>\r\nclass Double_hash_table_tester:public Tester< DoubleHashTable<Type> > {\r\n    using Tester< DoubleHashTable<Type> >::object;\r\n\tusing Tester< DoubleHashTable<Type> >::command;\r\n\r\n\tpublic:\r\n\t\tDouble_hash_table_tester( DoubleHashTable<Type> *obj = 0 ):Tester< DoubleHashTable<Type> >( obj ) {\r\n\t\t\t// empty\r\n\t\t}\r\n\r\n\t\tvoid process();\r\n};\r\n\r\n\r\n/****************************************************\r\n * void process()\r\n *\r\n * Process the current command.  For singly-linked lists, these include:\r\n *\r\n *           Member \r\n *   Flag   Function         Tests if ...\r\n *\r\n *  Accessors\r\n *\r\n *   size n          size            the size equals n\r\n *   capacity n      capacity        the capacity equals n\r\n *   load_factor d   load_factor     the load factor equals d\r\n *   empty b         empty           the result is the boolean value b (0/1)\r\n *   member n b      member          checks if n is in the hash table (return value b)\r\n *   bin n m         bin             checks if m is in bin n\r\n *\r\n *  Mutators\r\n *\r\n *   insert n        insert          the element can be inserted into the hash table (always succeeds)\r\n *   remove n b      remove          the element can be inserted into the hash table\r\n *   clear           clear           empties the hash table\r\n ****************************************************/\r\n\r\ntemplate <typename Type>\r\nvoid Double_hash_table_tester<Type>::process() {\r\n\tif ( command == \"size\" ) {\r\n\t\t// check if the size equals the next integer read\r\n\r\n\t\tint expected_size;\r\n\r\n\t\tstd::cin >> expected_size;\r\n\r\n\t\tint actual_size = object->size();\r\n\r\n\t\tif ( actual_size == expected_size ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in size(): expecting the value '\" << expected_size << \"' but got '\" << actual_size << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"capacity\" ) {\r\n\t\t// check if the capacity equals the next integer read\r\n\r\n\t\tint expected_capacity;\r\n\r\n\t\tstd::cin >> expected_capacity;\r\n\r\n\t\tint actual_capacity = object->capacity();\r\n\r\n\t\tif ( actual_capacity == expected_capacity ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in capacity(): expecting the value '\" << expected_capacity << \"' but got '\" << actual_capacity << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"load_factor\" ) {\r\n\t\t// check if the load factor equals the next double read\r\n\r\n\t\tdouble expected_load_factor;\r\n\r\n\t\tstd::cin >> expected_load_factor;\r\n\r\n\t\tdouble actual_load_factor = object->load_factor();\r\n\r\n\t\tif ( actual_load_factor == expected_load_factor ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in load_factor(): expecting the value '\" << expected_load_factor << \"' but got '\" << actual_load_factor << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"empty\" ) {\r\n\t\t// check if the empty status equals the next boolean read\r\n\r\n\t\tbool expected_empty;\r\n\r\n\t\tstd::cin >> expected_empty;\r\n\r\n\t\tbool actual_empty = object->empty();\r\n\r\n\t\tif ( actual_empty == expected_empty ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in empty(): expecting the value '\" << expected_empty << \"' but got '\" << actual_empty << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"member\" ) {\r\n\t\t// check if the element is in the object\r\n\r\n\t\tType n;\r\n\t\tbool expected_member;\r\n\r\n\t\tstd::cin >> n;\r\n\t\tstd::cin >> expected_member;\r\n\r\n\t\tbool actual_member = object->member( n );\r\n\r\n\t\tif ( actual_member == expected_member ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in member(\" << n << \"): expecting the value '\" << expected_member << \"' but got '\" << actual_member << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"bin\" ) {\r\n\t\t// check the element in the specified bin\r\n\r\n\t\tint n;\r\n\t\tType expected_value;\r\n\r\n\t\tstd::cin >> n;\r\n\t\tstd::cin >> expected_value;\r\n\r\n\t\tType actual_value = object->bin( n );\r\n\r\n\t\tif ( actual_value == expected_value ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in bin(\" << n << \"): expecting the value '\" << expected_value << \"' but got '\" << actual_value << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"insert\" ) {\r\n\t\t// insert the next integer read onto the hash table\r\n\r\n\t\tType n;\r\n\r\n\t\tstd::cin >> n;\r\n\r\n\t\tobject->insert( n );\r\n\t\tstd::cout << \"Okay\" << std::endl;\r\n\t} else if ( command == \"remove\" ) {\r\n\t\t// check the element in the specified bin\r\n\r\n\t\tType n;\r\n\t\tbool expected_value;\r\n\r\n\t\tstd::cin >> n;\r\n\t\tstd::cin >> expected_value;\r\n\r\n\t\tbool actual_value = object->remove( n );\r\n\r\n\t\tif ( actual_value == expected_value ) {\r\n\t\t\tstd::cout << \"Okay\" << std::endl;\r\n\t\t} else {\r\n\t\t\tstd::cout << \": Failure in remove(\" << n << \"): expecting the value '\" << expected_value << \"' but got '\" << actual_value << \"'\" << std::endl;\r\n\t\t}\r\n\t} else if ( command == \"clear\" ) {\r\n\t\tobject->clear();\r\n\r\n\t\tstd::cout << \"Okay\" << std::endl;\r\n\t} else if ( command == \"print\" ) {\r\n\t\tobject->print();\r\n\r\n\t\tstd::cout << std::endl << \"Okay\" << std::endl;\r\n\t//} else if ( command == \"cout\" ) {\r\n\t//\tstd::cout << *object << std::endl;\r\n\t} else {\r\n\t\tstd::cout << command << \": Command not found.\" << std::endl;\r\n\t}\r\n}\r\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":5685}]],"length":5685,"saved":false}
