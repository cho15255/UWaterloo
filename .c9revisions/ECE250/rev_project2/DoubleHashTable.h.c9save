{"ts":1360910090374,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#ifndef DOUBLE_HASH_TABLE_H\n#define DOUBLE_HASH_TABLE_H\n\n/*****************************************\n * UW User ID:  jh9cho\n * Submitted for ECE 250\n * Semester of Submission:  (Winter) 2013\n *\n * By submitting this file, I affirm that\n * I am the author of all modifications to\n * the provided code.\n *****************************************/\n\n#include \"Exception.h\"\n#include \"ece250.h\"\n\nenum state { EMPTY, OCCUPIED, DELETED };\n\ntemplate<typename T>\nclass DoubleHashTable {\n    private:\n\t\tint count;\n\t\tint power;\n\t\tint array_size;\n\t\tT *array;\n\t\tstate *occupied;\n\n\t\tint h1( T const & ) const; // first hash function\n\t\tint h2( T const & ) const; // second hash function\n\n\tpublic:\n\t\tDoubleHashTable( int = 5 );\n\t\t~DoubleHashTable();\n\t\tint size() const;\n\t\tint capacity() const;\n\t\tdouble load_factor() const;\n\t\tbool empty() const;\n\t\tbool member( T const & ) const;\n\t\tT bin( int ) const;\n\n\t\tvoid print() const;\n\n\t\tvoid insert( T const & );\n\t\tbool remove( T const & );\n\t\tvoid clear();\n};\n\ntemplate<typename T >\nDoubleHashTable<T >::DoubleHashTable( int m ):\ncount( 0 ), power( m ),\narray_size( 1 << power ),\narray( new T [array_size] ),\noccupied( new state[array_size] ) {\n    \n\tfor ( int i = 0; i < array_size; ++i ) {\n\t\toccupied[i] = EMPTY;\n\t}\n}\n\ntemplate<typename T >\nDoubleHashTable<T >::~DoubleHashTable() {\n    \n\tdelete[] occupied;\n    delete[] array;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::size() const {\n    \n\treturn count;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::capacity() const {\n    \n\treturn array_size;\n}\n\ntemplate<typename T >\ndouble DoubleHashTable<T >::load_factor() const {\n    \n\treturn (double)count/array_size;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::empty() const {\n    \n    if (count == 0) {\n        return true;\n    }\n    \n\treturn false;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::h1( T const &obj ) const {\n   \n   int h = (int)obj&(array_size-1);\n   \n    while (h < 0) {\n        return h + array_size;\n    }\n    \n\treturn h;\n}\n\ntemplate<typename T >\nint DoubleHashTable<T >::h2( T const &obj ) const {\n    \n    int h = (int)(obj/array_size)&(array_size-1);\n    \n    while (h < 0) {\n        h = h + array_size;   \n    }\n    \n    if (h%2 == 0) {\n        h += 1;\n    }\n    \n\treturn h;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::member( T const &obj ) const {\n\tint probing = h1(obj);\n    int offset = h2(obj);\n    \n    for (int i=0; i<array_size; i++) {\n        if (array[probing] == obj) {\n            return true;\n        }\n        \n        else if (occupied[probing] == EMPTY) {\n            break;\n        }\n        \n        probing += i*offset;\n    }\n    \n\treturn false;\n}\n\ntemplate<typename T >\nT DoubleHashTable<T >::bin( int n ) const {\n\treturn array[n];\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::insert( T const &obj ) {\n\tif (count == array_size) {\n         throw overflow();\n\t}\n    \n    if (member(obj)) {\n        return;\n    }\n    \n    int probing = h1(obj);\n    int offset = h2(obj);\n    \n    while (occupied[probing] == OCCUPIED) {\n        probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = obj;\n    occupied[probing] = OCCUPIED;\n}\n\ntemplate<typename T >\nbool DoubleHashTable<T >::remove( T const &obj ) {\n    \n    if (!member(obj)) {\n        return false;\n    }\n    \n    int probing = h1(obj);\n    int offset = h2(obj);\n    \n    while (array[probing] != obj) {\n        probing = (probing+offset) & (array_size-1);\n    }\n    \n    array[probing] = 0;\n    occupied[probing] = DELETED;\n    count --;\n    \n    return true;\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::clear() {\n    for (int i=0; i<array_size; i++) {\n        array[i] = 0;\n        occupied[i] = EMPTY;\n        count = 0;\n    }\n}\n\ntemplate<typename T >\nvoid DoubleHashTable<T >::print() const {\n    // enter your implemetation here \t\n    return;\n}\n\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":3829}]],"length":3829}
{"contributors":[],"silentsave":false,"ts":1360910085718,"patch":[[{"diffs":[[0,"_TABLE_H"],[1,"\r"],[0,"\n#define"]],"start1":19,"start2":19,"length1":16,"length2":17},{"diffs":[[0,"_TABLE_H"],[-1,"\n"],[1,"\r\n\r"],[0,"\n/******"]],"start1":48,"start2":48,"length1":17,"length2":19},{"diffs":[[0,"********"],[1,"\r"],[0,"\n * UW U"]],"start1":94,"start2":94,"length1":16,"length2":17},{"diffs":[[0,"  jh9cho"],[1,"\r"],[0,"\n * Subm"]],"start1":118,"start2":118,"length1":16,"length2":17},{"diffs":[[0," ECE 250"],[1,"\r"],[0,"\n * Seme"]],"start1":144,"start2":144,"length1":16,"length2":17},{"diffs":[[0,"er) 2013"],[1,"\r"],[0,"\n *"],[1,"\r"],[0,"\n * By s"]],"start1":187,"start2":187,"length1":19,"length2":21},{"diffs":[[0,"irm that"],[1,"\r"],[0,"\n * I am"]],"start1":234,"start2":234,"length1":16,"length2":17},{"diffs":[[0,"tions to"],[1,"\r"],[0,"\n * the "]],"start1":278,"start2":278,"length1":16,"length2":17},{"diffs":[[0,"ed code."],[1,"\r"],[0,"\n ******"]],"start1":301,"start2":301,"length1":16,"length2":17},{"diffs":[[0,"*******/"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#includ"]],"start1":346,"start2":346,"length1":17,"length2":19},{"diffs":[[0,"ption.h\""],[1,"\r"],[0,"\n#includ"]],"start1":372,"start2":372,"length1":16,"length2":17},{"diffs":[[0,"ce250.h\""],[-1,"\n"],[1,"\r\n\r"],[0,"\nenum st"]],"start1":393,"start2":393,"length1":17,"length2":19},{"diffs":[[0,"LETED };"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":437,"start2":437,"length1":17,"length2":19},{"diffs":[[0,"ename T>"],[1,"\r"],[0,"\nclass D"]],"start1":461,"start2":461,"length1":16,"length2":17},{"diffs":[[0,"hTable {"],[1,"\r"],[0,"\n    pri"]],"start1":486,"start2":486,"length1":16,"length2":17},{"diffs":[[0,"private:"],[-1,"\n\t"],[1,"\r\n    "],[0,"\tint cou"]],"start1":500,"start2":500,"length1":18,"length2":22},{"diffs":[[0,"t count;"],[1,"\r"],[0,"\n\t\tint p"]],"start1":517,"start2":517,"length1":16,"length2":17},{"diffs":[[0,"t power;"],[1,"\r"],[0,"\n\t\tint a"]],"start1":531,"start2":531,"length1":16,"length2":17},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n\t\tT *ar"]],"start1":550,"start2":550,"length1":16,"length2":17},{"diffs":[[0," *array;"],[1,"\r"],[0,"\n\t\tstate"]],"start1":563,"start2":563,"length1":16,"length2":17},{"diffs":[[0,"ccupied;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tint h"]],"start1":583,"start2":583,"length1":17,"length2":19},{"diffs":[[0,"function"],[1,"\r"],[0,"\n\t\tint h"]],"start1":638,"start2":638,"length1":16,"length2":17},{"diffs":[[0,"function"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\tpublic"]],"start1":692,"start2":692,"length1":17,"length2":19},{"diffs":[[0,"\tpublic:"],[1,"\r"],[0,"\n\t\tDoubl"]],"start1":704,"start2":704,"length1":16,"length2":17},{"diffs":[[0,"t = 5 );"],[1,"\r"],[0,"\n\t\t~Doub"]],"start1":735,"start2":735,"length1":16,"length2":17},{"diffs":[[0,"Table();"],[1,"\r"],[0,"\n\t\tint s"]],"start1":758,"start2":758,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tint c"]],"start1":779,"start2":779,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tdoubl"]],"start1":804,"start2":804,"length1":16,"length2":17},{"diffs":[[0,"_factor() const;"],[1,"\r"],[0,"\n\t\tbool empty() "]],"start1":827,"start2":827,"length1":32,"length2":33},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tbool "]],"start1":858,"start2":858,"length1":16,"length2":17},{"diffs":[[0,") const;"],[1,"\r"],[0,"\n\t\tT bin"]],"start1":893,"start2":893,"length1":16,"length2":17},{"diffs":[[0,"in( int ) const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid print() "]],"start1":908,"start2":908,"length1":33,"length2":35},{"diffs":[[0,") const;"],[-1,"\n"],[1,"\r\n\r"],[0,"\n\t\tvoid "]],"start1":941,"start2":941,"length1":17,"length2":19},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tbool "]],"start1":972,"start2":972,"length1":16,"length2":17},{"diffs":[[0,"nst & );"],[1,"\r"],[0,"\n\t\tvoid "]],"start1":1001,"start2":1001,"length1":16,"length2":17},{"diffs":[[0,"r();"],[1,"\r"],[0,"\n};"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntem"]],"start1":1022,"start2":1022,"length1":12,"length2":15},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nDoubleHashTable"]],"start1":1039,"start2":1039,"length1":32,"length2":33},{"diffs":[[0,"int m ):"],[1,"\r"],[0,"\ncount( "]],"start1":1095,"start2":1095,"length1":16,"length2":17},{"diffs":[[0,"er( m ),"],[1,"\r"],[0,"\narray_s"]],"start1":1120,"start2":1120,"length1":16,"length2":17},{"diffs":[[0,"power ),"],[1,"\r"],[0,"\narray( "]],"start1":1147,"start2":1147,"length1":16,"length2":17},{"diffs":[[0,"size] ),"],[1,"\r"],[0,"\noccupie"]],"start1":1177,"start2":1177,"length1":16,"length2":17},{"diffs":[[0,"ize] ) {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tfor ( "]],"start1":1214,"start2":1214,"length1":21,"length2":23},{"diffs":[[0," ++i ) {"],[1,"\r"],[0,"\n\t\toccup"]],"start1":1263,"start2":1263,"length1":16,"length2":17},{"diffs":[[0,"PTY;"],[1,"\r"],[0,"\n\t}"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntem"]],"start1":1291,"start2":1291,"length1":14,"length2":18},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nDoubleH"]],"start1":1319,"start2":1319,"length1":16,"length2":17},{"diffs":[[0,"able() {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tdelete"]],"start1":1362,"start2":1362,"length1":21,"length2":23},{"diffs":[[0,"ccupied;"],[1,"\r"],[0,"\n    del"]],"start1":1389,"start2":1389,"length1":16,"length2":17},{"diffs":[[0,"] array;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1410,"start2":1410,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1430,"start2":1430,"length1":32,"length2":33},{"diffs":[[0,"::size() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn count;\n"]],"start1":1471,"start2":1471,"length1":37,"length2":39},{"diffs":[[0,"n count;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1501,"start2":1501,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1521,"start2":1521,"length1":32,"length2":33},{"diffs":[[0,"pacity() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn array_s"]],"start1":1566,"start2":1566,"length1":37,"length2":39},{"diffs":[[0,"turn array_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1593,"start2":1593,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\ndouble "]],"start1":1629,"start2":1629,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":1680,"start2":1680,"length1":21,"length2":23},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":1721,"start2":1721,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":1741,"start2":1741,"length1":32,"length2":33},{"diffs":[[0,"ty() const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if (cou"]],"start1":1788,"start2":1788,"length1":29,"length2":31},{"diffs":[[0,"f (count == 0) {"],[1,"\r"],[0,"\n        return "]],"start1":1813,"start2":1813,"length1":32,"length2":33},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":1843,"start2":1843,"length1":27,"length2":30},{"diffs":[[0,"\r\n\treturn false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":1864,"start2":1864,"length1":35,"length2":38},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nint DoubleHashT"]],"start1":1892,"start2":1892,"length1":32,"length2":33},{"diffs":[[0," const {"],[1,"\r"],[0,"\n   "],[1,"\r"],[0,"\n   int "]],"start1":1953,"start2":1953,"length1":20,"length2":22},{"diffs":[[0,"h = "],[-1,"(int)"],[1,"static_cast<int>("],[0,"obj"],[1,")"],[0,"&(ar"]],"start1":1975,"start2":1975,"length1":16,"length2":29},{"diffs":[[0,"size-1);"],[1,"\r"],[0,"\n   "],[1,"\r"],[0,"\n    whi"]],"start1":2008,"start2":2008,"length1":20,"length2":22},{"diffs":[[0," while (h < 0) {"],[1,"\r"],[0,"\n        return "]],"start1":2026,"start2":2026,"length1":32,"length2":33},{"diffs":[[0,"ay_size;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":2066,"start2":2066,"length1":27,"length2":30},{"diffs":[[0,"    \r\n\treturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplate<typena"]],"start1":2083,"start2":2083,"length1":35,"length2":38},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nint Dou"]],"start1":2119,"start2":2119,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    int"]],"start1":2172,"start2":2172,"length1":21,"length2":23},{"diffs":[[0,"int h = "],[-1,"(int"],[1,"static_cast<int>(obj"],[0,")(obj/ar"]],"start1":2192,"start2":2192,"length1":20,"length2":36},{"diffs":[[0,"size-1);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    whi"]],"start1":2245,"start2":2245,"length1":21,"length2":23},{"diffs":[[0,"le (h < 0) {"],[1,"\r"],[0,"\n        h ="]],"start1":2268,"start2":2268,"length1":24,"length2":25},{"diffs":[[0,"size;   "],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if "]],"start1":2304,"start2":2304,"length1":27,"length2":30},{"diffs":[[0," == 0) {"],[1,"\r"],[0,"\n       "]],"start1":2338,"start2":2338,"length1":16,"length2":17},{"diffs":[[0," h += 1;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\treturn"]],"start1":2355,"start2":2355,"length1":27,"length2":30},{"diffs":[[0,"eturn h;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2380,"start2":2380,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nbool DoubleHash"]],"start1":2400,"start2":2400,"length1":32,"length2":33},{"diffs":[[0," const {"],[1,"\r"],[0,"\n\tint pr"]],"start1":2466,"start2":2466,"length1":16,"length2":17},{"diffs":[[0,"obing = h1(obj);"],[1,"\r"],[0,"\n    int offset "]],"start1":2483,"start2":2483,"length1":32,"length2":33},{"diffs":[[0,"t = h2(obj);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    for (in"]],"start1":2514,"start2":2514,"length1":29,"length2":31},{"diffs":[[0,"ray_size; i++) {"],[1,"\r"],[0,"\n        if (arr"]],"start1":2556,"start2":2556,"length1":32,"length2":33},{"diffs":[[0,"obing] == obj) {"],[1,"\r"],[0,"\n            ret"]],"start1":2594,"start2":2594,"length1":32,"length2":33},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n       "]],"start1":2628,"start2":2628,"length1":16,"length2":17},{"diffs":[[0,"true;\r\n        }"],[1,"\r"],[0,"\n        \n      "]],"start1":2631,"start2":2631,"length1":32,"length2":33},{"diffs":[[0,"     }\r\n        "],[1,"\r"],[0,"\n        else if"]],"start1":2641,"start2":2641,"length1":32,"length2":33},{"diffs":[[0,"EMPTY) {"],[1,"\r"],[0,"\n       "]],"start1":2697,"start2":2697,"length1":16,"length2":17},{"diffs":[[0,"  break;"],[1,"\r"],[0,"\n       "]],"start1":2717,"start2":2717,"length1":16,"length2":17},{"diffs":[[0,";\r\n        }"],[1,"\r"],[0,"\n        \n  "]],"start1":2724,"start2":2724,"length1":24,"length2":25},{"diffs":[[0," }\r\n        "],[1,"\r"],[0,"\n        pro"]],"start1":2734,"start2":2734,"length1":24,"length2":25},{"diffs":[[0,"ing "],[-1,"+"],[0,"= "],[-1,"i*offset;"],[1,"(probing + offset) & (array_size - 1);\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n\tre"]],"start1":2760,"start2":2760,"length1":31,"length2":62},{"diffs":[[0,"n false;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2825,"start2":2825,"length1":19,"length2":22},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nT Doubl"]],"start1":2853,"start2":2853,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n\treturn"]],"start1":2898,"start2":2898,"length1":16,"length2":17},{"diffs":[[0,"rray[n];"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":2917,"start2":2917,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":2937,"start2":2937,"length1":32,"length2":33},{"diffs":[[0,"&obj ) {"],[1,"\r"],[0,"\n\tif (co"]],"start1":2997,"start2":2997,"length1":16,"length2":17},{"diffs":[[0,"_size) {"],[1,"\r"],[0,"\n       "]],"start1":3026,"start2":3026,"length1":16,"length2":17},{"diffs":[[0,"w();"],[1,"\r"],[0,"\n\t}"],[1," else {\r"],[0,"\n    "],[-1,"\n"],[0,"    "]],"start1":3058,"start2":3058,"length1":17,"length2":25},{"diffs":[[0," (member(obj)) {"],[1,"\r"],[0,"\n        return;"]],"start1":3085,"start2":3085,"length1":32,"length2":33},{"diffs":[[0,"    "],[1,"    "],[0,"return;"],[-1,"\n    }\n"],[1,"\r\n        }\r\n  "],[0,"    "],[1,"  \r"],[0,"\n"],[1,"    "],[0,"    "]],"start1":3107,"start2":3107,"length1":27,"length2":46},{"diffs":[[0,"obing = h1(obj);"],[-1,"\n"],[1,"\r\n   "],[0,"    "],[1," "],[0,"int offset = h2("]],"start1":3159,"start2":3159,"length1":37,"length2":42},{"diffs":[[0,"h2(obj);"],[-1,"\n    \n    while"],[1,"\r\n        \r\n        for (int i=0; i<array_size; i++) {\r\n            if"],[0," (occupi"]],"start1":3198,"start2":3198,"length1":31,"length2":86},{"diffs":[[0,"UPIED) {"],[-1,"\n"],[1,"\r\n       "],[0,"        "],[1," "],[0,"probing "]],"start1":3302,"start2":3302,"length1":25,"length2":34},{"diffs":[[0,"obing = (probing"],[-1,"+"],[1," + "],[0,"offset) & (array"]],"start1":3330,"start2":3330,"length1":33,"length2":35},{"diffs":[[0,"ray_size"],[-1,"-1);\n    }\n    \n"],[1," - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n    "],[0,"    arra"]],"start1":3362,"start2":3362,"length1":32,"length2":110},{"diffs":[[0,"] = obj;"],[-1,"\n"],[1,"\r\n   "],[0,"    "],[1," "],[0,"occupied"]],"start1":3481,"start2":3481,"length1":21,"length2":26},{"diffs":[[0,"CCUPIED;"],[-1,"\n}\n"],[1,"\r\n        count ++;   \r\n\t}\r\n}\r\n\r"],[0,"\ntemplat"]],"start1":3520,"start2":3520,"length1":19,"length2":48},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nbool Do"]],"start1":3574,"start2":3574,"length1":16,"length2":17},{"diffs":[[0,"&obj ) {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    if "]],"start1":3626,"start2":3626,"length1":21,"length2":23},{"diffs":[[0,"(obj)) {"],[1,"\r"],[0,"\n       "]],"start1":3657,"start2":3657,"length1":16,"length2":17},{"diffs":[[0,"n false;"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    int"]],"start1":3680,"start2":3680,"length1":27,"length2":30},{"diffs":[[0,"g = h1(obj);"],[1,"\r"],[0,"\n    int off"]],"start1":3717,"start2":3717,"length1":24,"length2":25},{"diffs":[[0,"h2(obj);"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    whi"]],"start1":3748,"start2":3748,"length1":21,"length2":23},{"diffs":[[0,"= obj) {"],[1,"\r"],[0,"\n       "]],"start1":3791,"start2":3791,"length1":16,"length2":17},{"diffs":[[0,"(probing"],[-1,"+"],[1," + "],[0,"offset) "]],"start1":3819,"start2":3819,"length1":17,"length2":19},{"diffs":[[0,"size"],[-1,"-"],[1," - "],[0,"1);"],[1,"\r"],[0,"\n    }"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n   "]],"start1":3847,"start2":3847,"length1":23,"length2":28},{"diffs":[[0,"robing] = 0;"],[1,"\r"],[0,"\n    occupie"]],"start1":3883,"start2":3883,"length1":24,"length2":25},{"diffs":[[0,"DELETED;"],[1,"\r"],[0,"\n    cou"]],"start1":3921,"start2":3921,"length1":16,"length2":17},{"diffs":[[0,"ount --;"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    ret"]],"start1":3936,"start2":3936,"length1":21,"length2":23},{"diffs":[[0,"rn true;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\ntemplat"]],"start1":3960,"start2":3960,"length1":19,"length2":22},{"diffs":[[0,"ate<typename T >"],[1,"\r"],[0,"\nvoid DoubleHash"]],"start1":3980,"start2":3980,"length1":32,"length2":33},{"diffs":[[0,"lear() {"],[1,"\r"],[0,"\n    for"]],"start1":4025,"start2":4025,"length1":16,"length2":17},{"diffs":[[0,"; i++) {"],[1,"\r"],[0,"\n       "]],"start1":4065,"start2":4065,"length1":16,"length2":17},{"diffs":[[0,"rray[i] = 0;"],[1,"\r"],[0,"\n        occ"]],"start1":4084,"start2":4084,"length1":24,"length2":25},{"diffs":[[0,"= EMPTY;"],[1,"\r"],[0,"\n    "],[1,"}\r\n    \r\n"],[0,"    coun"]],"start1":4118,"start2":4118,"length1":21,"length2":31},{"diffs":[[0,"= 0;"],[-1,"\n    }\n}\n"],[1,"\r\n}\r\n\r"],[0,"\ntem"]],"start1":4151,"start2":4151,"length1":17,"length2":14},{"diffs":[[0,"name T >"],[1,"\r"],[0,"\nvoid Do"]],"start1":4175,"start2":4175,"length1":16,"length2":17},{"diffs":[[0," const {"],[1,"\r"],[0,"\n    // "]],"start1":4218,"start2":4218,"length1":16,"length2":17},{"diffs":[[0,"n here \t"],[1,"\r"],[0,"\n    ret"]],"start1":4258,"start2":4258,"length1":16,"length2":17},{"diffs":[[0,"urn;"],[1,"\r"],[0,"\n}"],[-1,"\n"],[1,"\r\n\r"],[0,"\n#en"]],"start1":4275,"start2":4275,"length1":11,"length2":14}]],"length":4292,"saved":false}
{"ts":1360910266567,"patch":[[{"diffs":[[0," {\r\n"],[-1,"\t"],[1,"\r\n    "],[0,"if"],[-1," "],[0,"(cou"]],"start1":3003,"start2":3003,"length1":12,"length2":16},{"diffs":[[0,"ay_size)"],[-1," {\r\n         "],[1,"\r\n\t{\r\n\t\t"],[0,"throw ov"]],"start1":3028,"start2":3028,"length1":29,"length2":24},{"diffs":[[0,"\r\n\t}"],[-1," "],[1,"\r\n\t"],[0,"else"],[-1," {\r\n        "],[1,"\r\n\t{\r\n\t\t"],[0,"if"],[-1," "],[0,"(mem"]],"start1":3061,"start2":3061,"length1":28,"length2":25},{"diffs":[[0,"obj)"],[-1,") {\r\n            return;\r\n        }\r\n        \r\n        int probing = h1(obj);\r\n        int offset = h2(obj);\r\n        \r\n        "],[1," == false)\r\n\t\t{\r\n\t\t\tint h1status = h1(obj); //running h1 with obj\r\n\t\t\tint h2status = h2(obj); //running h2 with obj\r\n\r\n\t\t\t"],[0,"for"],[-1," "],[0,"(int i"],[-1,"="],[1," = "],[0,"0; i"],[-1,"<"],[1," < "],[0,"arra"]],"start1":3090,"start2":3090,"length1":152,"length2":149},{"diffs":[[0,"++) "],[-1,"{\r\n            if (occupied[probing] == OCCUPIED) {\r\n                probing = (probing + offset) & (array_size - 1);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        array[probing] = obj;\r\n        "],[1,"//looping through the whole array\r\n\t\t\t\t{\r\n\t\t\t\t\tint position = h1status + (i*h2status); //position is equal to h1status + istatus\r\n\t\t\t\t\tposition = position & (array_size-1); //moding the position since it might go over M\r\n\r\n\t\t\t\t\tif(occupied[position] == OCCUPIED) //if it is occupied then contiune the loop\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\telse if(occupied[position] == EMPTY || occupied[position] == DELETED) //if the position is empty\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[position] = obj; //set the element to object\r\n\t\t\t\t\t\t\t"],[0,"occu"]],"start1":3248,"start2":3248,"length1":248,"length2":511},{"diffs":[[0,"\t\toccupied[p"],[-1,"robing"],[1,"osition"],[0,"] = OCCUPIED"]],"start1":3753,"start2":3753,"length1":30,"length2":31},{"diffs":[[0,"IED;"],[-1,"\r\n        count ++;   "],[1," //flag the position to occupied\r\n\t\t\t\t\t\t\tcount++; //increment the counter since the a new element is being added\r\n\t\t\t\t\t\t\tbreak; //break out of the loop when done\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n"],[0,"\r\n\t}"]],"start1":3781,"start2":3781,"length1":30,"length2":191}]],"length":4710,"saved":false}
